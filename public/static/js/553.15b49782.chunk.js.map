{"version":3,"file":"static/js/553.15b49782.chunk.js","mappings":"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","sources":["components/playground/ChatLabel.jsx","components/playground/AIMessage.jsx","components/playground/UserMessage.jsx","components/playground/PlaceholderMessage.jsx","components/playground/ChatSection.jsx","pages/PlaygroundPage.jsx"],"sourcesContent":["import { faCircleNotch, faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { useState } from \"react\";\nimport TablerIcon from \"../TablerIcon\";\nimport { IconMessageDots, IconTrash } from \"@tabler/icons-react\";\n\n\nexport default function ChatLabel({ title, onClick, onDelete, active=false })\n{\n    const [isDeletingChatRoom, setDeletingChatRoom] = useState(false)\n\n    const handleDelete = () => {\n        setDeletingChatRoom(true)\n        if (typeof onDelete === \"function\")\n            onDelete(() => {\n                setDeletingChatRoom(false)\n            })\n    }\n\n    return (\n        <div role=\"button\" className={[\"chat-label\", active && \"active\"].join(\" \")} onClick={onClick} >\n            <TablerIcon icon={IconMessageDots} stroke={1.25} /> {title}\n            <span className=\"delete\" onClick={handleDelete}>\n                {isDeletingChatRoom ? (\n                    <FontAwesomeIcon icon={faCircleNotch} spin />\n                ) : (\n                    <TablerIcon icon={IconTrash} stroke={1.25} />\n                )}\n            </span>\n        </div>\n    )\n}\n","import AIAvatar from \"@images/playground/AI-avatar.png\"\nimport Markdown from 'react-markdown'\n\n\nexport default function AIMessage({ content })\n{\n    // const parsedContent = content.split(\"\\n\").map((str, i) => <p key={i}>{str}</p>)\n\n    return (\n        <div className=\"message ai-message\">\n            <img src={AIAvatar} className=\"avatar\" />\n\n            <Markdown>{content}</Markdown>\n        </div>\n    )\n}\n","\n\nexport default function UserMessage({ content })\n{\n    return (\n        <div className=\"message user-message\">\n            {content}\n        </div>\n    )\n}\n","import SpinnerGrow from \"../SpinnerGrow\";\n\n\nexport default function PlaceholderMessage({ content }) {\n    return (\n        <div className=\"message ai-message\">\n            <SpinnerGrow size=\"sm\" /> {content ? content : \" Thinking...\"}\n        </div>\n    )\n}\n","\nimport SuperButton from \"../SuperButton\";\nimport AIMessage from \"./AIMessage\";\nimport UserMessage from \"./UserMessage\";\nimport SectionLoading from \"../SectionLoading\";\nimport useChatRoom from \"../../hooks/account\";\nimport { toast } from \"react-toastify\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useQueryClient } from \"react-query\";\nimport { clearChatHistory, sendPrompt, stopPrompt } from \"../../api/account\";\nimport PlaceholderMessage from \"./PlaceholderMessage\";\nimport { useDemo, useNaiveLocalStorage, useScrollToRef } from \"../../hooks\";\nimport { OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport TablerIcon from \"../TablerIcon\";\nimport { IconPlayerStopFilled, IconSend, IconTrash } from \"@tabler/icons-react\";\n\n\nexport default function ChatSection({ uuid })\n{\n    const { isDemo } = useDemo()\n    const [getDemoSubscription, setDemoSubscription] = useNaiveLocalStorage(\"demo_sub\")\n    const demoSubscription = getDemoSubscription()\n\n    const queryClient = useQueryClient()\n    const { isLoading, isError, error, chat } = useChatRoom(uuid)\n    const [ chatHistory, setChatHistory ] = useState([])\n    const [ prompt, setPrompt ] = useState(\"\")\n    const [ isSending, setSending ] = useState(false)\n    const [isClearingChatHistory, setClearingChatHistory ] = useState(false)\n    const [promptRef, scrollToPrompt] = useScrollToRef()\n\n    useEffect(() => {\n        if (chat?.chat_history)\n        {\n            try\n            {\n                let messages = []\n                JSON.parse(chat?.chat_history).map((history, i) => {\n                    if (history.type === \"ai\")\n                        messages[i] = <AIMessage key={i} content={history.content} />\n                    else\n                        messages[i] = <UserMessage key={i} content={history.content} />\n                })\n\n                setChatHistory(messages)\n            } catch (error){\n                console.log(\"error parsing chat history\")\n            }\n        }\n        else\n        {\n            setChatHistory([])\n        }\n\n        scrollToPrompt()\n    }, [isLoading, chat])\n\n    useEffect(() => {\n        scrollToPrompt()\n    }, [])\n\n\n    const handleSubmit = useCallback((e) => {\n        e.preventDefault()\n        if (!prompt.trim())\n        {\n            return toast.warning(\"Please ask something.\")\n        }\n\n        if (isDemo && demoSubscription?.questions <= 0)\n        {\n            return toast.warning(\"The demo quota is exceeded, please wait 12 hours 🙏\")\n        }\n\n        setSending(true)\n\n        setChatHistory(chatHistory => {\n            return [\n                ...chatHistory,\n                <UserMessage key={Math.random()} content={prompt} />,\n                <PlaceholderMessage key={Math.random()} />\n            ]\n        })\n        setPrompt(\"\") // clear the prompt\n        scrollToPrompt()\n\n        sendPrompt(uuid, prompt).then(data => {\n            if (!data?.errors) {\n                const reply = data?.response?.output?.trim()\n\n                if (!reply)\n                {\n                    toast.error(\"OpenAI servers are overloaded, please try again or later\")\n                }\n\n                setChatHistory(chatHistory => {\n                    // remove the PlaceholderMessage first, before appending the reply\n                    return [...(chatHistory.slice(0, -1)), <AIMessage key={Math.random()} content={reply} />]\n                })\n\n                // invalidate subscription cache\n                queryClient.invalidateQueries(\"user.subscription\")\n\n                // for demo only\n                if (isDemo) {\n                    setDemoSubscription(prev => {\n                        return {\n                            ...prev,\n                            questions: prev.questions - 1\n                        }\n                    })\n                }\n            }\n            else {\n                toast.error(data.message)\n                setChatHistory(chatHistory => {\n                    // remove the PlaceholderMessage first, before appending the reply\n                    return chatHistory.slice(0, -1)\n                })\n            }\n        }).catch(err => {\n            if (err.response?.data?.message)\n            {\n                toast.warning(err.response?.data?.message)\n            }\n            else\n            {\n                toast.error(err.message)\n            }\n\n            setChatHistory(chatHistory => {\n                // remove the PlaceholderMessage first, before appending the reply\n                return chatHistory.slice(0, -1)\n            })\n        }).finally(() => {\n            setSending(false)\n            queryClient.invalidateQueries(`user.chat.${uuid}`)\n            // scroll down\n            scrollToPrompt()\n        })\n    }, [uuid, prompt])\n\n    const handleStop = useCallback((e) => {\n\n        stopPrompt(uuid).then(req => {\n            console.log(\"prompt stopped\")\n        }).catch (err => {\n            if (err.response.status === 422 || err.response.status === 400) {\n                toast.warning(err.response?.data?.message)\n            }\n            else\n            {\n                toast.error(err.message)\n            }\n        }).finally(() => {\n\n        })\n        // reset the prompt input\n        setSending(false)\n        setChatHistory(chatHistory => {\n            // remove the PlaceholderMessage\n            return chatHistory.slice(0, -1)\n        })\n    }, [uuid])\n\n    const handleClearChatHistory = useCallback(() => {\n        setClearingChatHistory(true)\n\n        clearChatHistory(uuid).then(req => {\n            if (req.status === 204)\n            {\n                toast.success(\"Cleared successfully.\")\n                queryClient.invalidateQueries(`user.chat.${uuid}`)\n                setChatHistory([])\n            }\n            else\n            {\n                toast.warning(\"Something went wrong!\")\n            }\n        }).catch(err => {\n            toast.error(err)\n        }).finally(() => {\n            setClearingChatHistory(false)\n        })\n    }, [uuid])\n\n\n    if (isLoading)\n    {\n        return <SectionLoading center={true} />\n    }\n\n    if (isError)\n    {\n        toast.error(error)\n    }\n\n\n    return (\n        <>\n            <div className=\"chats flex-grow-1 d-flex align-items-end\">\n                <div className=\"container px-4\">\n                    {chatHistory.map((message, i) => message)}\n                </div>\n            </div>\n            <div className=\"container prompt-input d-flex gap-2 pt-5 pb-4 px-4\" ref={promptRef}>\n                <form onSubmit={handleSubmit} className=\"flex-grow-1\">\n                    <input type=\"text\" value={prompt} onChange={(e) => setPrompt(e.target.value)} className=\"form-control form-control-lg\" placeholder=\"Ask your document a question?\" />\n                </form>\n\n                <OverlayTrigger\n                    placement=\"top\"\n                    delay={{ show: 250, hide: 400 }}\n                    overlay={(props) => (\n                        <Tooltip id=\"button-tooltip\" {...props}>\n                            {isSending ? \"Stop\" : \"Send\"}\n                        </Tooltip>\n                    )}\n                >\n                    <SuperButton disabled={!prompt && !isSending} className={[\"btn btn-sm send\", (isSending ? \"btn-danger\" : \"btn-primary\")].join(\" \")} title={isSending ? \"Stop\" : \"Send\"} onClick={(e) => {\n                        if (isSending)\n                            return handleStop(e)\n                        handleSubmit(e)\n                    }}>\n                        {isSending ? (\n                            <TablerIcon icon={IconPlayerStopFilled} />\n                        ) : (\n                            <TablerIcon icon={IconSend} />\n                        )}\n                    </SuperButton>\n                </OverlayTrigger>\n\n                <OverlayTrigger\n                    placement=\"top\"\n                    delay={{ show: 250, hide: 400 }}\n                    overlay={(props) => (\n                        <Tooltip id=\"button-tooltip\" {...props}>\n                            Clear Chat History\n                        </Tooltip>\n                    )}\n                >\n                    <SuperButton className=\"btn btn-outline-secondary clear-history\" isLoading={isClearingChatHistory} title=\"Clear Chat History\" onClick={handleClearChatHistory}><TablerIcon icon={IconTrash} /></SuperButton>\n                </OverlayTrigger>\n            </div>\n            <div className=\"container px-4 mb-2\">\n                <small>\n                    <b>Note:</b> if the chat bot didn't know how to access to document or where to look up, just tell him \"<b><i>from document?</i></b>\".\n                </small>\n            </div>\n        </>\n    )\n}\n","import { faBarsStaggered, faChevronRight, faGem, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport Dropzone from \"../components/Dropzone\"\nimport { Sidebar } from 'react-pro-sidebar';\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useDemo, useEventListener, useLCInfo, useNaiveLocalStorage } from \"../hooks\";\nimport AvatarPalceholder from \"../components/AvatarPalceholder\";\nimport ChatLabel from \"../components/playground/ChatLabel\";\nimport ChatSection from \"../components/playground/ChatSection\";\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\nimport { useUser } from \"../hooks/auth\";\nimport FullscreenLoading from \"../components/FullscreenLoading\";\nimport { useCurrentSubscription, useUserChatRoomList } from \"../hooks/account\";\nimport { toast } from \"react-toastify\";\nimport { uploadFile } from \"../api\";\nimport { useQueryClient } from \"react-query\";\nimport SpinnerGrow from \"../components/SpinnerGrow\";\nimport { deleteChatRoom } from \"../api/account\";\nimport TablerIcon from \"../components/TablerIcon\";\nimport { IconBolt, IconCloudUpload, IconSparkles } from \"@tabler/icons-react\";\nimport { VALID_DOCUMENT_TYPES, getAvailableDocumentTypes, getAvailableDocumentTypesString } from \"@utils/index\";\n\n\nconst onUpload = ({\n    files,\n    setProgress,\n    setIsSuccessUpload,\n    resetDropzone,\n    name,\n    createChatRoom,\n    setProcessing,\n    subscription,\n    isDemo,\n    demoSubscription,\n    setDemoSubscription,\n    queryClient\n }) => {\n\n    if (isDemo && demoSubscription.pdfs <= 0)\n    {\n        resetDropzone()\n        return toast.warning(\"The demo quota is exceeded, please wait 12 hours 🙏\")\n    }\n\n    if (!isDemo)\n    {\n        if (subscription?.status !== 1)\n        {\n            resetDropzone()\n            return toast.warning(\"You need a valid subscription to continue.\")\n        }\n        else if (subscription?.pdfs <= 0)\n        {\n            resetDropzone()\n            return toast.warning(\"You have reached the maximum number of document uploads.\")\n        }\n    }\n\n    uploadFile(\"user/chat\", files[0], {\n        onUploadProgress: (e) => {\n            let perc = e.loaded / e.total * 100\n            setProgress(perc)\n            if (perc >= 100)\n                setProcessing(true)\n        }\n    }).then((res) => {\n\n        if (res.data && !res.data?.errors)\n        {\n            const { chat_room } = res.data\n            // Create a new chat room\n            createChatRoom(chat_room.uuid, chat_room.title)\n            setIsSuccessUpload(true)\n            // to reset everything in the dropzone\n            setTimeout(() => {\n                resetDropzone()\n            }, 5000)\n\n            // for demo only\n            if (isDemo)\n            {\n                setDemoSubscription(prev => {\n                    return {\n                        ...prev,\n                        pdfs: prev.pdfs - 1\n                    }\n                })\n            }\n\n            // invalidate subscription cache\n            queryClient.invalidateQueries(\"user.subscription\")\n        }\n        else {\n            toast.error(res.data?.message)\n            resetDropzone()\n        }\n\n    }).catch(err => {\n\n        if (err.response.status === 422 || err.response.status == 400) {\n            toast.warning(err.response?.data?.message)\n        }\n        else\n        {\n            toast.error(err.message)\n        }\n        resetDropzone()\n    }).finally(() => {\n        setProcessing(false)\n    })\n\n}\n\nconst onError = (rejectedFiles) => {\n    toast.error(\"Invalid document!\")\n}\n\n\nexport default function PlaygroundPage()\n{\n    const { isDemo } = useDemo()\n    const [ getDemoSubscription, setDemoSubscription ] = useNaiveLocalStorage(\"demo_sub\", {\n        pdfs: 2,\n        questions: 10,\n        created_at: new Date().getTime()\n    })\n\n    const demoSubscription = isDemo ? getDemoSubscription() : null;\n    const { isExtendedLicense: isEL } = useLCInfo()\n\n    const [ toggled, setToggled ] = useState(false)\n    const [ collapsed, setCollapsed ] = useState(false)\n    const [windowInnerWidth, setWindowInnerWidth] = useEventListener('resize', window.innerWidth, () => window.innerWidth)\n\n    const { user } = useUser()\n    const { isLoading: isSubscriptionLoading, subscription } = useCurrentSubscription()\n\n    const queryClient = useQueryClient()\n    const navigate = useNavigate()\n    const { uuid } = useParams()\n    const [ currentChatRoomUUID, setCurrentChatRoomUUID ] = useState(uuid)\n\n    const { isLoading, isError, error, userChatRoomList } = useUserChatRoomList()\n    const [ isProcessing, setProcessing ] = useState(false)\n\n    useEffect(() => {\n        if (uuid !== currentChatRoomUUID)\n            navigate(`/playground/${currentChatRoomUUID}`)\n    }, [currentChatRoomUUID])\n\n    const handleChatLabelClick = useCallback((uuid) => {\n        setCurrentChatRoomUUID(uuid)\n        navigate(`/playground/${uuid}`)\n    }, [uuid])\n\n    const createChatRoom = useCallback((uuid, title) => {\n        queryClient.invalidateQueries(\"user.chat.list\")\n        setCurrentChatRoomUUID(uuid)\n        navigate(`/playground/${uuid}`)\n    }, [uuid])\n\n    const handleChatRoomDeletion = useCallback((uuid, callback) => {\n        let nextUUID = \"\"\n        if (userChatRoomList)\n        {\n            for (const chatroom of userChatRoomList)\n            {\n                if (chatroom?.uuid !== uuid)\n                {\n                    nextUUID = chatroom?.uuid\n                    break\n                }\n            }\n        }\n\n        deleteChatRoom(uuid).then(req => {\n            if (req.status === 204) {\n                toast.success(\"Deleted successfully.\")\n                queryClient.invalidateQueries(\"user.chat.list\").then(() => {\n                    if (nextUUID)\n                        setCurrentChatRoomUUID(nextUUID)\n                })\n            }\n            else {\n                toast.warning(\"Something went wrong!\")\n            }\n        }).catch(err => {\n            toast.error(err)\n        }).finally(() => {\n            callback()\n        })\n    }, [uuid, userChatRoomList])\n\n    useEffect(() => {\n        if ((!uuid || !currentChatRoomUUID) && userChatRoomList !== undefined && Object.keys(userChatRoomList).length) {\n            navigate(`/playground/${userChatRoomList[0]?.uuid}`)\n            setCurrentChatRoomUUID(userChatRoomList[0]?.uuid)\n        }\n        else if (userChatRoomList !== undefined && !Object.keys(userChatRoomList).length)\n        {\n            setCurrentChatRoomUUID(\"\")\n            navigate(`/playground`)\n        }\n    }, [uuid, userChatRoomList])\n\n    useEffect(() => {\n        if (new Date().getTime() - demoSubscription?.created_at > (12 * 60 * 60 * 1000)) // 12 hours\n        {\n            // reset the demo subscription\n            setDemoSubscription({\n                pdfs: 2,\n                questions: 10,\n                created_at: new Date().getTime()\n            })\n        }\n    }, [])\n\n    if (isError)\n    {\n        toast.error(error)\n    }\n\n    if (!Object.keys(user).length || isLoading || isSubscriptionLoading)\n    {\n        return <FullscreenLoading />\n    }\n\n\n    return (\n        <>\n            <main className=\"playground\">\n                <Sidebar width=\"290px\" toggled={toggled} collapsed={collapsed} breakPoint=\"md\" onBackdropClick={() => setToggled(!toggled)} backgroundColor=\"\" className=\"\">\n                    <div className=\"playground-sidebar\">\n                        {(!!userChatRoomList?.length && (subscription || demoSubscription)) && (\n                            <Dropzone onUpload={onUpload} onError={onError} name=\"pdf-file\"\n                            extraOnUploadProps={{\n                                createChatRoom,\n                                setProcessing,\n                                subscription,\n                                isDemo,\n                                demoSubscription,\n                                setDemoSubscription,\n                                queryClient,\n                            }} dropzoneOptions={{\n                                accept: getAvailableDocumentTypes(),\n                                maxSize: 50 * 1024 * 1024, // (in bytes) 50 MB\n                            }} >\n                                {isProcessing ? (\n                                    <div className=\"text-center\">\n                                        <b><SpinnerGrow size=\"sm\" /> Processing...</b>\n                                    </div>\n                                ) : (\n                                    collapsed ? (\n                                        <FontAwesomeIcon icon={faPlus} />\n                                    ) : (\n                                        <div className=\"text-center\">\n                                            <b><FontAwesomeIcon icon={faPlus} /> New Chat</b>\n                                            <p>\n                                                Drag & Drop your Document<br />\n                                                <small>({getAvailableDocumentTypesString()})</small>\n                                            </p>\n                                        </div>\n                                    )\n                                )}\n                            </Dropzone>\n                        )}\n\n                        <div className=\"chat-labels-list my-3\">\n                            {userChatRoomList?.map((chat, i) => {\n                                return <ChatLabel\n                                    key={i}\n                                    title={chat.title}\n                                    onClick={() => handleChatLabelClick(chat.uuid)}\n                                    onDelete={(callback) => handleChatRoomDeletion(chat.uuid, callback)}\n                                    active={chat.uuid === currentChatRoomUUID}\n                                    />\n                            })}\n                        </div>\n\n                        <div className=\"sidebar-bottom-section\">\n                            {isDemo && (\n                                <>\n                                    {(subscription?.questions <= 20 || subscription?.pdfs <= 10) && (\n                                        <Link to=\"/pricing\" className=\"btn btn-warning btn-lg btn-block\"><TablerIcon icon={IconBolt} stroke={1.5} size={30} /> Upgrade</Link>\n                                    )}\n\n                                    <div className=\"quota\">\n                                        <small>- Quota limited for demo only.</small><br />\n                                        <small>- Quota reset every 12 hours.</small>\n                                        <h3 className=\"h6\">Quota:</h3>\n                                        <span>{demoSubscription?.pdfs} PDFs</span><br />\n                                        <span>Max PDF size: {subscription?.pdf_size}MB/pdf</span><br />\n                                        <span>{demoSubscription?.questions} PDF Questions</span><br />\n                                    </div>\n                                </>\n                            )}\n\n                            {subscription && isEL && !isDemo && (\n                                <>\n                                    {(subscription?.questions <= 20 || subscription?.pdfs <= 10) && (\n                                        <Link to=\"/pricing\" className=\"btn btn-warning btn-lg btn-block\"><TablerIcon icon={IconBolt} stroke={1.5} size={30} /> Upgrade</Link>\n                                    )}\n\n                                    <div className=\"quota\">\n                                        <h3 className=\"h6\">Available Subscription Quota:</h3>\n                                        <span>{subscription?.pdfs} PDFs left.</span><br />\n                                        <span>Max PDF size: {subscription?.pdf_size}MB/pdf.</span><br />\n                                        <span>{subscription?.questions} PDF Questions left.</span><br />\n                                    </div>\n                                </>\n                            )}\n                            {user && (\n                                <div className=\"profile\" onClick={() => navigate(\"/account/settings\")}>\n                                    <AvatarPalceholder username={user.username} size={45} />\n                                    <div>\n                                        <b>{user.username}</b><br />\n                                        <span>({user.email})</span>\n                                    </div>\n                                    <div className=\"\">\n                                        <FontAwesomeIcon icon={faChevronRight} />\n                                    </div>\n                                </div>\n                            )}\n\n                        </div>\n                    </div>\n\n                </Sidebar>\n\n                <section className=\"playground-chat-section\">\n                    {windowInnerWidth <= 768 && (\n                        <button type=\"button\" onClick={() => setToggled(toggled => !toggled)} className=\"btn btn-light toggle-sidebar-button text-primary\"><FontAwesomeIcon icon={faBarsStaggered} /></button>\n                    )}\n\n                    <section className=\"d-flex flex-column\">\n                        {isEL ? (\n                            (subscription && subscription?.status == 1 || isDemo) ? (\n                                subscription?.questions <= 0 ? (\n                                    <div className=\"d-flex flex-column justify-content-start p-5\">\n                                        Your subscription has reached its maximum usage.\n                                        <Link to=\"/pricing\" className=\"btn btn-warning my-3\">Upgrade Now?</Link>\n                                    </div>\n                                ) : (\n                                    currentChatRoomUUID && (\n                                        <ChatSection uuid={currentChatRoomUUID} key={currentChatRoomUUID} />\n                                    )\n                                )\n                            ) : (\n                                <div className=\"d-flex flex-column justify-content-start p-5 mt-3\">\n                                    You need to have a subscription in order to be able to use the Playground section.\n                                    <Link to=\"/pricing\" className=\"btn btn-warning my-3\">Get a subscription now?</Link>\n                                </div>\n                            )\n                        ) : (\n                            currentChatRoomUUID && (\n                                <ChatSection uuid={currentChatRoomUUID} key={currentChatRoomUUID} />\n                            )\n                        )}\n\n                        {!currentChatRoomUUID && (\n                            <div className=\"d-flex justify-content-center align-items-center h-100\" >\n                                <div className=\"w-50\">\n                                    {(subscription || demoSubscription) && (\n                                        <div className=\"text-center\">\n                                            <h3>Upload your Document to chat with.</h3>\n                                            <Dropzone onUpload={onUpload} onError={onError} name=\"pdf-file\"\n                                                extraOnUploadProps={{\n                                                    createChatRoom,\n                                                    setProcessing,\n                                                    subscription,\n                                                    isDemo,\n                                                    demoSubscription,\n                                                    setDemoSubscription,\n                                                    queryClient,\n                                                }} dropzoneOptions={{\n                                                    accept: getAvailableDocumentTypes(),\n                                                    maxSize: 50 * 1024 * 1024, // (in bytes) 50 MB\n                                                }} >\n                                                {isProcessing ? (\n                                                    <div className=\"text-center\">\n                                                        <b><SpinnerGrow size=\"sm\" /> Processing...</b>\n                                                    </div>\n                                                ) : (\n                                                    collapsed ? (\n                                                        <FontAwesomeIcon icon={faPlus} />\n                                                    ) : (\n                                                        <div className=\"text-center\">\n                                                            <b><TablerIcon icon={IconCloudUpload} size={40} /><br />\n                                                                Upload you Document<br />\n                                                                ({getAvailableDocumentTypesString()})\n                                                            </b>\n                                                            <p>(Drag & Drop)</p>\n                                                        </div>\n                                                    )\n                                                )}\n                                            </Dropzone>\n                                        </div>\n                                    )}\n                                </div>\n                            </div>\n                        )}\n                    </section>\n                </section>\n            </main>\n        </>\n    )\n}\n"],"names":["ChatLabel","_ref","title","onClick","onDelete","_ref$active","active","_useState","useState","_useState2","_slicedToArray","isDeletingChatRoom","setDeletingChatRoom","_jsxs","role","className","join","children","_jsx","TablerIcon","icon","IconMessageDots","stroke","FontAwesomeIcon","faCircleNotch","spin","IconTrash","AIMessage","content","src","AIAvatar","Markdown","UserMessage","PlaceholderMessage","SpinnerGrow","size","ChatSection","uuid","isDemo","useDemo","_useNaiveLocalStorage","useNaiveLocalStorage","_useNaiveLocalStorage2","getDemoSubscription","setDemoSubscription","demoSubscription","queryClient","useQueryClient","_useChatRoom","useChatRoom","isLoading","isError","error","chat","chatHistory","setChatHistory","_useState3","_useState4","prompt","setPrompt","_useState5","_useState6","isSending","setSending","_useState7","_useState8","isClearingChatHistory","setClearingChatHistory","_useScrollToRef","useScrollToRef","_useScrollToRef2","promptRef","scrollToPrompt","useEffect","chat_history","messages","JSON","parse","map","history","i","type","console","log","handleSubmit","useCallback","e","preventDefault","trim","questions","toast","concat","_toConsumableArray","Math","random","sendPrompt","then","data","errors","message","slice","_data$response","_data$response$output","reply","response","output","invalidateQueries","prev","_objectSpread","catch","err","_err$response","_err$response$data","_err$response2","_err$response2$data","finally","handleStop","stopPrompt","req","_err$response3","_err$response3$data","status","handleClearChatHistory","clearChatHistory","SectionLoading","center","_Fragment","ref","onSubmit","value","onChange","target","placeholder","OverlayTrigger","placement","delay","show","hide","overlay","props","Tooltip","id","SuperButton","disabled","IconPlayerStopFilled","IconSend","onUpload","files","setProgress","setIsSuccessUpload","resetDropzone","createChatRoom","name","setProcessing","subscription","pdfs","uploadFile","onUploadProgress","perc","loaded","total","res","_res$data","_res$data2","chat_room","setTimeout","onError","rejectedFiles","PlaygroundPage","created_at","Date","getTime","isEL","useLCInfo","isExtendedLicense","toggled","setToggled","collapsed","_useEventListener","useEventListener","window","innerWidth","_useEventListener2","windowInnerWidth","user","useUser","_useCurrentSubscripti","useCurrentSubscription","isSubscriptionLoading","navigate","useNavigate","useParams","currentChatRoomUUID","setCurrentChatRoomUUID","_useUserChatRoomList","useUserChatRoomList","userChatRoomList","isProcessing","handleChatLabelClick","handleChatRoomDeletion","callback","nextUUID","_step","_iterator","_createForOfIteratorHelper","s","n","done","chatroom","f","deleteChatRoom","_userChatRoomList$","_userChatRoomList$2","undefined","Object","keys","length","FullscreenLoading","Sidebar","width","breakPoint","onBackdropClick","backgroundColor","Dropzone","extraOnUploadProps","dropzoneOptions","accept","getAvailableDocumentTypes","maxSize","faPlus","getAvailableDocumentTypesString","Link","to","IconBolt","pdf_size","AvatarPalceholder","username","email","faChevronRight","faBarsStaggered","IconCloudUpload"],"sourceRoot":""}