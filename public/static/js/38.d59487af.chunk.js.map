{"version":3,"file":"static/js/38.d59487af.chunk.js","mappings":"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","sources":["components/playground/ChatLabel.jsx","components/playground/AIMessage.jsx","components/playground/UserMessage.jsx","components/SpinnerGrow.jsx","components/playground/PlaceholderMessage.jsx","components/playground/ChatSection.jsx","pages/PlaygroundPage.jsx"],"sourcesContent":["import { faCircleNotch, faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { useState } from \"react\";\n\n\nexport default function ChatLabel({ title, onClick, onDelete, active=false })\n{\n    const [isDeletingChatRoom, setDeletingChatRoom] = useState(false)\n\n    const handleDelete = () => {\n        setDeletingChatRoom(true)\n        if (typeof onDelete === \"function\")\n            onDelete(() => {\n                setDeletingChatRoom(false)\n            })\n    }\n\n    return (\n        <div role=\"button\" className={[\"chat-label\", active && \"active\"].join(\" \")} onClick={onClick} >\n            {title}\n            <span className=\"delete\" onClick={handleDelete}>\n                {isDeletingChatRoom ? (\n                    <FontAwesomeIcon icon={faCircleNotch} spin />\n                ) : (\n                    <FontAwesomeIcon icon={faTrash} />\n                )}\n            </span>\n        </div>\n    )\n}\n","\n\nexport default function AIMessage({ content })\n{\n    const parsedContent = content.split(\"\\n\").map((str, i) => <p key={i}>{str}</p>)\n\n    return (\n        <div className=\"message ai-message\">\n            {parsedContent}\n        </div>\n    )\n}\n","\n\nexport default function UserMessage({ content })\n{\n    return (\n        <div className=\"message user-message\">\n            {content}\n        </div>\n    )\n}\n","\nexport default function SpinnerGrow({ size, className, ...rest })\n{\n    let extraClasses = \"\"\n    if (size === \"sm\")\n        extraClasses += \"spinner-grow-sm\"\n\n    return <span className={[\"spinner-grow\", extraClasses, className].join(\" \")} {...rest} role=\"status\" aria-hidden=\"true\"></span>\n}\n","import SpinnerGrow from \"../SpinnerGrow\";\n\n\nexport default function PlaceholderMessage({ content }) {\n    return (\n        <div className=\"message ai-message\">\n            <SpinnerGrow size=\"sm\" /> {content ? content : \" Thinking...\"}\n        </div>\n    )\n}\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport SuperButton from \"../SuperButton\";\nimport AIMessage from \"./AIMessage\";\nimport UserMessage from \"./UserMessage\";\nimport { faPaperPlane, faStop, faTrashCan } from \"@fortawesome/free-solid-svg-icons\";\nimport SectionLoading from \"../SectionLoading\";\nimport useChatRoom from \"../../hooks/account\";\nimport { toast } from \"react-toastify\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useQueryClient } from \"react-query\";\nimport { clearChatHistory, sendPrompt, stopPrompt } from \"../../api/account\";\nimport PlaceholderMessage from \"./PlaceholderMessage\";\nimport { useDemo, useNaiveLocalStorage, useScrollToRef } from \"../../hooks\";\nimport { OverlayTrigger, Tooltip } from \"react-bootstrap\";\n\n\nexport default function ChatSection({ uuid })\n{\n    // const { uuid } = useParams()\n    const { isDemo } = useDemo()\n    const [getDemoSubscription, setDemoSubscription] = useNaiveLocalStorage(\"demo_sub\")\n    const demoSubscription = getDemoSubscription()\n\n    const queryClient = useQueryClient()\n    const { isLoading, isError, error, chat } = useChatRoom(uuid)\n    const [ chatHistory, setChatHistory ] = useState([])\n    const [ prompt, setPrompt ] = useState(\"\")\n    const [ isSending, setSending ] = useState(false)\n    const [isClearingChatHistory, setClearingChatHistory ] = useState(false)\n    const [promptRef, scrollToPrompt] = useScrollToRef()\n\n\n    useEffect(() => {\n        if (chat?.chat_history)\n        {\n            try\n            {\n                let messages = []\n                JSON.parse(chat?.chat_history).map((history, i) => {\n                    if (history.type === \"ai\")\n                        messages[i] = <AIMessage key={i} content={history.content} />\n                    else\n                        messages[i] = <UserMessage key={i} content={history.content} />\n                })\n\n                setChatHistory(messages)\n            } catch (error){\n                console.log(\"error parsing chat history\")\n            }\n        }\n        else\n        {\n            setChatHistory([<AIMessage key={Math.random()} content=\"Hi, How can I assist you today?\" />])\n        }\n\n        scrollToPrompt()\n    }, [isLoading, chat])\n\n    useEffect(() => {\n        scrollToPrompt()\n    }, [])\n\n\n    const handleSubmit = useCallback((e) => {\n        e.preventDefault()\n        if (!prompt.trim())\n        {\n            return toast.warning(\"Please ask something.\")\n        }\n\n        if (isDemo && demoSubscription?.questions <= 0)\n        {\n            return toast.warning(\"The demo quota is exceeded, please wait 12 hours 🙏\")\n        }\n\n        setSending(true)\n\n        setChatHistory(chatHistory => {\n            return [\n                ...chatHistory,\n                <UserMessage key={Math.random()} content={prompt} />,\n                <PlaceholderMessage key={Math.random()} />\n            ]\n        })\n        setPrompt(\"\") // clear the prompt\n        scrollToPrompt()\n\n        sendPrompt(uuid, prompt).then(data => {\n            if (!data?.errors) {\n                const reply = data?.response?.output?.trim()\n\n                if (!reply)\n                {\n                    toast.error(\"OpenAI servers are overloaded, please try again or later\")\n                }\n\n                setChatHistory(chatHistory => {\n                    // remove the PlaceholderMessage first, before appending the reply\n                    return [...(chatHistory.slice(0, -1)), <AIMessage key={Math.random()} content={reply} />]\n                })\n\n                // invalidate subscription cache\n                queryClient.invalidateQueries(\"user.subscription\")\n\n                // for demo only\n                if (isDemo) {\n                    setDemoSubscription(prev => {\n                        return {\n                            ...prev,\n                            questions: prev.questions - 1\n                        }\n                    })\n                }\n            }\n            else {\n                toast.error(data.message)\n                setChatHistory(chatHistory => {\n                    // remove the PlaceholderMessage first, before appending the reply\n                    return chatHistory.slice(0, -1)\n                })\n            }\n        }).catch(err => {\n            if (err.response?.data?.message)\n            {\n                toast.warning(err.response?.data?.message)\n            }\n            else\n            {\n                toast.error(err.message)\n            }\n\n            setChatHistory(chatHistory => {\n                // remove the PlaceholderMessage first, before appending the reply\n                return chatHistory.slice(0, -1)\n            })\n        }).finally(() => {\n            setSending(false)\n            queryClient.invalidateQueries(`user.chat.${uuid}`)\n            // scroll down\n            scrollToPrompt()\n        })\n    }, [uuid, prompt])\n\n    const handleStop = useCallback((e) => {\n\n        stopPrompt(uuid).then(req => {\n            console.log(\"prompt stopped\")\n        }).catch (err => {\n            if (err.response.status === 422 || err.response.status === 400) {\n                toast.warning(err.response?.data?.message)\n            }\n            else\n            {\n                toast.error(err.message)\n            }\n        }).finally(() => {\n\n        })\n        // reset the prompt input\n        setSending(false)\n        setChatHistory(chatHistory => {\n            // remove the PlaceholderMessage\n            return chatHistory.slice(0, -1)\n        })\n    }, [uuid])\n\n    const handleClearChatHistory = useCallback(() => {\n        setClearingChatHistory(true)\n\n        clearChatHistory(uuid).then(req => {\n            if (req.status === 204)\n            {\n                toast.success(\"Cleared successfully.\")\n                setChatHistory([])\n            }\n            else\n            {\n                toast.warning(\"Something went wrong!\")\n            }\n        }).catch(err => {\n            toast.error(err)\n        }).finally(() => {\n            setClearingChatHistory(false)\n        })\n    }, [uuid])\n\n\n    if (isLoading)\n    {\n        return <SectionLoading center={true} />\n    }\n\n    if (isError)\n    {\n        toast.error(error)\n    }\n\n\n    return (\n        <>\n            <div className=\"chats flex-grow-1 d-flex align-items-end\">\n                <div className=\"container px-4\">\n                    {chatHistory.map((message, i) => message)}\n                </div>\n            </div>\n            <div className=\"container prompt-input d-flex gap-2 pt-5 pb-4 px-4\" ref={promptRef}>\n                <form onSubmit={handleSubmit} className=\"flex-grow-1\">\n                    <input type=\"text\" value={prompt} onChange={(e) => setPrompt(e.target.value)} className=\"form-control form-control-lg\" placeholder=\"Ask anything...\" />\n                </form>\n\n                <OverlayTrigger\n                    placement=\"top\"\n                    delay={{ show: 250, hide: 400 }}\n                    overlay={(props) => (\n                        <Tooltip id=\"button-tooltip\" {...props}>\n                            {isSending ? \"Stop\" : \"Send\"}\n                        </Tooltip>\n                    )}\n                >\n                    <SuperButton className={[\"btn btn-lg send\", (isSending ? \"btn-danger\" : \"btn-primary\")].join(\" \")} title={isSending ? \"Stop\" : \"Send\"} onClick={(e) => {\n                        if (isSending)\n                            return handleStop(e)\n                        handleSubmit(e)\n                    }}>\n                        {isSending ? (\n                            <FontAwesomeIcon icon={faStop} />\n                        ) : (\n                            <FontAwesomeIcon icon={faPaperPlane} />\n                        )}\n                    </SuperButton>\n                </OverlayTrigger>\n\n                <OverlayTrigger\n                    placement=\"top\"\n                    delay={{ show: 250, hide: 400 }}\n                    overlay={(props) => (\n                        <Tooltip id=\"button-tooltip\" {...props}>\n                            Clear Chat History\n                        </Tooltip>\n                    )}\n                >\n                    <SuperButton className=\"btn btn-secondary clear-history\" isLoading={isClearingChatHistory} title=\"Clear Chat History\" onClick={handleClearChatHistory}><FontAwesomeIcon icon={faTrashCan} /></SuperButton>\n                </OverlayTrigger>\n            </div>\n            <div className=\"container px-4 mb-2\">\n                <small>\n                    <b>Note:</b> if the chat bot said that he doesn't have access to document or doesn't know where to look up, just tell him \"<b><i>from document?</i></b>\".\n                </small>\n            </div>\n        </>\n    )\n}\n","import { faBarsStaggered, faGem, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport Dropzone from \"../components/Dropzone\"\nimport { Sidebar } from 'react-pro-sidebar';\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useDemo, useEventListener, useLCInfo, useNaiveLocalStorage } from \"../hooks\";\nimport AvatarPalceholder from \"../components/AvatarPalceholder\";\nimport ChatLabel from \"../components/playground/ChatLabel\";\nimport ChatSection from \"../components/playground/ChatSection\";\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\nimport { useUser } from \"../hooks/auth\";\nimport FullscreenLoading from \"../components/FullscreenLoading\";\nimport { useCurrentSubscription, useUserChatRoomList } from \"../hooks/account\";\nimport { toast } from \"react-toastify\";\nimport { uploadFile } from \"../api\";\nimport { useQueryClient } from \"react-query\";\nimport SpinnerGrow from \"../components/SpinnerGrow\";\nimport { deleteChatRoom } from \"../api/account\";\n\n\nconst onUpload = ({\n    files,\n    setProgress,\n    setIsSuccessUpload,\n    resetDropzone,\n    name,\n    createChatRoom,\n    setProcessing,\n    subscription,\n    isDemo,\n    demoSubscription,\n    setDemoSubscription,\n    queryClient\n }) => {\n\n    if (isDemo && demoSubscription.pdfs <= 0)\n    {\n        resetDropzone()\n        return toast.warning(\"The demo quota is exceeded, please wait 12 hours 🙏\")\n    }\n\n    if (!isDemo)\n    {\n        if (subscription?.status !== 1)\n        {\n            resetDropzone()\n            return toast.warning(\"You need a valid subscription to continue.\")\n        }\n        else if (subscription?.pdfs <= 0)\n        {\n            resetDropzone()\n            return toast.warning(\"You have reached the maximum number of document uploads.\")\n        }\n    }\n\n    uploadFile(\"user/chat\", files[0], {\n        onUploadProgress: (e) => {\n            let perc = e.loaded / e.total * 100\n            setProgress(perc)\n            if (perc >= 100)\n                setProcessing(true)\n        }\n    }).then((res) => {\n\n        if (res.data && !res.data?.errors)\n        {\n            const { chat_room } = res.data\n            // Create a new chat room\n            createChatRoom(chat_room.uuid, chat_room.title)\n            setIsSuccessUpload(true)\n            // to reset everything in the dropzone\n            setTimeout(() => {\n                resetDropzone()\n            }, 5000)\n\n            // for demo only\n            if (isDemo)\n            {\n                setDemoSubscription(prev => {\n                    return {\n                        ...prev,\n                        pdfs: prev.pdfs - 1\n                    }\n                })\n            }\n\n            // invalidate subscription cache\n            queryClient.invalidateQueries(\"user.subscription\")\n        }\n        else {\n            toast.error(res.data?.message)\n            resetDropzone()\n        }\n\n    }).catch(err => {\n\n        if (err.response.status === 422 || err.response.status == 400) {\n            toast.warning(err.response?.data?.message)\n        }\n        else\n        {\n            toast.error(err.message)\n        }\n        resetDropzone()\n    }).finally(() => {\n        setProcessing(false)\n    })\n\n}\n\nconst onError = (rejectedFiles) => {\n    toast.error(\"Invalid document!\")\n}\n\n\nexport default function PlaygroundPage()\n{\n    const { isDemo } = useDemo()\n    const [ getDemoSubscription, setDemoSubscription ] = useNaiveLocalStorage(\"demo_sub\", {\n        pdfs: 2,\n        questions: 10,\n        created_at: new Date().getTime()\n    })\n\n    const demoSubscription = getDemoSubscription()\n    const { isExtendedLicense: isEL } = useLCInfo()\n\n    const [ toggled, setToggled ] = useState(false)\n    const [ collapsed, setCollapsed ] = useState(false)\n    const [windowInnerWidth, setWindowInnerWidth] = useEventListener('resize', window.innerWidth, () => window.innerWidth)\n\n    const { user } = useUser()\n    const { isLoading: isSubscriptionLoading, subscription } = useCurrentSubscription()\n\n    const queryClient = useQueryClient()\n    const navigate = useNavigate()\n    const { uuid } = useParams()\n    const [ currentChatRoomUUID, setCurrentChatRoomUUID ] = useState(uuid)\n\n    const { isLoading, isError, error, userChatRoomList } = useUserChatRoomList()\n    const [ isProcessing, setProcessing ] = useState(false)\n\n    const handleChatLabelClick = useCallback((uuid) => {\n        setCurrentChatRoomUUID(uuid)\n        navigate(`/playground/${uuid}`)\n    }, [uuid])\n\n    const createChatRoom = useCallback((uuid, title) => {\n        queryClient.invalidateQueries(\"user.chat.list\")\n        setCurrentChatRoomUUID(uuid)\n        navigate(`/playground/${uuid}`)\n    }, [uuid])\n\n    const handleChatRoomDeletion = useCallback((uuid, callback) => {\n\n        deleteChatRoom(uuid).then(req => {\n            if (req.status === 204) {\n                queryClient.invalidateQueries(\"user.chat.list\")\n                toast.success(\"Deleted successfully.\")\n            }\n            else {\n                toast.warning(\"Something went wrong!\")\n            }\n        }).catch(err => {\n            toast.error(err)\n        }).finally(() => {\n            callback()\n        })\n    }, [uuid])\n\n    useEffect(() => {\n        if ((!uuid || !currentChatRoomUUID) && userChatRoomList !== undefined && Object.keys(userChatRoomList).length) {\n            // return <Navigate to={`/playground/${userChatRoomList[0]?.uuid}`} replace={true} />\n            navigate(`/playground/${userChatRoomList[0]?.uuid}`)\n            setCurrentChatRoomUUID(userChatRoomList[0]?.uuid)\n        }\n        else if (userChatRoomList !== undefined && !Object.keys(userChatRoomList).length)\n        {\n            setCurrentChatRoomUUID(\"\")\n            navigate(`/playground`)\n        }\n    }, [uuid, userChatRoomList])\n\n    useEffect(() => {\n        if (new Date().getTime() - demoSubscription.created_at > (12 * 60 * 60 * 1000)) // 12 hours\n        {\n            // reset the demo subscription\n            setDemoSubscription({\n                pdfs: 2,\n                questions: 10,\n                created_at: new Date().getTime()\n            })\n        }\n    }, [])\n\n    if (isError)\n    {\n        toast.error(error)\n    }\n\n    if (!Object.keys(user).length || isLoading || isSubscriptionLoading)\n    {\n        return <FullscreenLoading />\n    }\n\n\n    return (\n        <>\n            <main className=\"playground\">\n                <Sidebar toggled={toggled} collapsed={collapsed} breakPoint=\"md\" onBackdropClick={() => setToggled(!toggled)} backgroundColor=\"\" className=\"\">\n                    <div className=\"playground-sidebar\">\n                        {(subscription || demoSubscription) && (\n                            <Dropzone onUpload={onUpload} onError={onError} name=\"pdf-file\"\n                            extraOnUploadProps={{\n                                createChatRoom,\n                                setProcessing,\n                                subscription,\n                                isDemo,\n                                demoSubscription,\n                                setDemoSubscription,\n                                queryClient,\n                            }} dropzoneOptions={{\n                                accept: { 'application/pdf': ['.pdf'] },\n                                maxSize: 50 * 1024 * 1024, // (in bytes) 50 MB\n                            }} >\n                                {isProcessing ? (\n                                    <div className=\"text-center\">\n                                        <b><SpinnerGrow size=\"sm\" /> Processing...</b>\n                                    </div>\n                                ) : (\n                                    collapsed ? (\n                                        <FontAwesomeIcon icon={faPlus} />\n                                    ) : (\n                                        <div className=\"text-center\">\n                                            <b><FontAwesomeIcon icon={faPlus} /> New Chat</b>\n                                            <p>Drag & Drop your PDF</p>\n                                        </div>\n                                    )\n                                )}\n                            </Dropzone>\n                        )}\n\n                        <div className=\"chat-labels-list my-3\">\n                            {userChatRoomList?.map((chat, i) => {\n                                return <ChatLabel\n                                    key={i}\n                                    title={chat.title}\n                                    onClick={() => handleChatLabelClick(chat.uuid)}\n                                    onDelete={(callback) => handleChatRoomDeletion(chat.uuid, callback)}\n                                    active={chat.uuid === currentChatRoomUUID}\n                                    />\n                            })}\n                        </div>\n\n                        <div className=\"sidebar-bottom-section\">\n                            {isDemo && (\n                                <>\n                                    {(subscription?.questions <= 20 || subscription?.pdfs <= 10) && (\n                                        <Link to=\"/account/settings/subscription\" className=\"btn btn-warning btn-lg btn-block\"><FontAwesomeIcon icon={faGem} /> Upgrade</Link>\n                                    )}\n\n                                    <div className=\"quota\">\n                                        <small>- Quota limited for demo only.</small><br />\n                                        <small>- Quota reset every 12 hours.</small>\n                                        <h3 className=\"h6\">Quota:</h3>\n                                        <span>{demoSubscription?.pdfs} PDFs</span><br />\n                                        <span>Max PDF size: {subscription?.pdf_size}MB/pdf</span><br />\n                                        <span>{demoSubscription?.questions} PDF Questions</span><br />\n                                    </div>\n                                </>\n                            )}\n\n                            {subscription && isEL && !isDemo && (\n                                <>\n                                    {(subscription?.questions <= 20 || subscription?.pdfs <= 10) && (\n                                        <Link to=\"/account/settings/subscription\" className=\"btn btn-warning btn-lg btn-block\"><FontAwesomeIcon icon={faGem} /> Upgrade</Link>\n                                    )}\n\n                                    <div className=\"quota\">\n                                        <h3 className=\"h6\">Quota:</h3>\n                                        <span>{subscription?.pdfs} PDFs</span><br />\n                                        <span>Max PDF size: {subscription?.pdf_size}MB/pdf</span><br />\n                                        <span>{subscription?.questions} PDF Questions</span><br />\n                                    </div>\n                                </>\n                            )}\n                            {user && (\n                                <div className=\"profile\" onClick={() => navigate(\"/account/settings\")}>\n                                    <AvatarPalceholder username={user.username} size={45} />\n                                    <div>\n                                        <b>{user.username}</b><br />\n                                        <span>({user.email})</span>\n                                    </div>\n                                </div>\n                            )}\n\n                            <footer>\n                                <Link to=\"/\">Home</Link>\n                                {isEL && (\n                                    <Link to=\"/pricing\">Pricing</Link>\n                                )}\n                                <Link to=\"/contact\">Contact us</Link>\n                            </footer>\n\n                        </div>\n                    </div>\n\n                </Sidebar>\n\n                <section className=\"playground-chat-section\">\n                    {windowInnerWidth <= 768 && (\n                        <button type=\"button\" onClick={() => setToggled(toggled => !toggled)} className=\"btn btn-light toggle-sidebar-button text-primary\"><FontAwesomeIcon icon={faBarsStaggered} /></button>\n                    )}\n\n                    <section className=\"d-flex flex-column\">\n                        {isEL ? (\n                            (subscription && subscription?.status == 1 || isDemo) ? (\n                                subscription?.questions <= 0 ? (\n                                    <div className=\"d-flex flex-column justify-content-start p-5\">\n                                        Your subscription has reached its maximum usage.\n                                        <Link to=\"/pricing\" className=\"btn btn-warning my-3\">Upgrade Now?</Link>\n                                    </div>\n                                ) : (\n                                    currentChatRoomUUID && (\n                                        <ChatSection uuid={currentChatRoomUUID} key={uuid} />\n                                    )\n                                )\n                            ) : (\n                                <div className=\"d-flex flex-column justify-content-start p-5\">\n                                    You need to have a subscription in order to be able to use the Playground section.\n                                    <Link to=\"/pricing\" className=\"btn btn-warning my-3\">Get a subscription now?</Link>\n                                </div>\n                            )\n                        ) : (\n                            currentChatRoomUUID && (\n                                <ChatSection uuid={currentChatRoomUUID} key={uuid} />\n                            )\n                        )}\n                    </section>\n                </section>\n            </main>\n        </>\n    )\n}\n"],"names":["ChatLabel","_ref","title","onClick","onDelete","_ref$active","active","_useState","useState","_useState2","_slicedToArray","isDeletingChatRoom","setDeletingChatRoom","_jsxs","role","className","join","children","_jsx","FontAwesomeIcon","icon","faCircleNotch","spin","faTrash","AIMessage","parsedContent","content","split","map","str","i","UserMessage","SpinnerGrow","size","rest","_objectWithoutProperties","_excluded","extraClasses","_objectSpread","PlaceholderMessage","ChatSection","uuid","isDemo","useDemo","_useNaiveLocalStorage","useNaiveLocalStorage","_useNaiveLocalStorage2","getDemoSubscription","setDemoSubscription","demoSubscription","queryClient","useQueryClient","_useChatRoom","useChatRoom","isLoading","isError","error","chat","chatHistory","setChatHistory","_useState3","_useState4","prompt","setPrompt","_useState5","_useState6","isSending","setSending","_useState7","_useState8","isClearingChatHistory","setClearingChatHistory","_useScrollToRef","useScrollToRef","_useScrollToRef2","promptRef","scrollToPrompt","useEffect","chat_history","messages","JSON","parse","history","type","console","log","Math","random","handleSubmit","useCallback","e","preventDefault","trim","questions","toast","concat","_toConsumableArray","sendPrompt","then","data","errors","message","slice","_data$response","_data$response$output","reply","response","output","invalidateQueries","prev","catch","err","_err$response","_err$response$data","_err$response2","_err$response2$data","finally","handleStop","stopPrompt","req","_err$response3","_err$response3$data","status","handleClearChatHistory","clearChatHistory","SectionLoading","center","_Fragment","ref","onSubmit","value","onChange","target","placeholder","OverlayTrigger","placement","delay","show","hide","overlay","props","Tooltip","id","SuperButton","faStop","faPaperPlane","faTrashCan","onUpload","files","setProgress","setIsSuccessUpload","resetDropzone","createChatRoom","name","setProcessing","subscription","pdfs","uploadFile","onUploadProgress","perc","loaded","total","res","_res$data","_res$data2","chat_room","setTimeout","onError","rejectedFiles","PlaygroundPage","created_at","Date","getTime","isEL","useLCInfo","isExtendedLicense","toggled","setToggled","collapsed","_useEventListener","useEventListener","window","innerWidth","_useEventListener2","windowInnerWidth","user","useUser","_useCurrentSubscripti","useCurrentSubscription","isSubscriptionLoading","navigate","useNavigate","useParams","currentChatRoomUUID","setCurrentChatRoomUUID","_useUserChatRoomList","useUserChatRoomList","userChatRoomList","isProcessing","handleChatLabelClick","handleChatRoomDeletion","callback","deleteChatRoom","_userChatRoomList$","_userChatRoomList$2","undefined","Object","keys","length","FullscreenLoading","Sidebar","breakPoint","onBackdropClick","backgroundColor","Dropzone","extraOnUploadProps","dropzoneOptions","accept","maxSize","faPlus","Link","to","faGem","pdf_size","AvatarPalceholder","username","email","faBarsStaggered"],"sourceRoot":""}