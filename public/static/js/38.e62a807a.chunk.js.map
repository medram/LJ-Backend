{"version":3,"file":"static/js/38.e62a807a.chunk.js","mappings":"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","sources":["components/playground/ChatLabel.jsx","components/playground/AIMessage.jsx","components/playground/UserMessage.jsx","components/SpinnerGrow.jsx","components/playground/PlaceholderMessage.jsx","components/playground/ChatSection.jsx","pages/PlaygroundPage.jsx"],"sourcesContent":["import { faCircleNotch, faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { useState } from \"react\";\n\n\nexport default function ChatLabel({ title, onClick, onDelete, active=false })\n{\n    const [isDeletingChatRoom, setDeletingChatRoom] = useState(false)\n\n    const handleDelete = () => {\n        setDeletingChatRoom(true)\n        if (typeof onDelete === \"function\")\n            onDelete(() => {\n                setDeletingChatRoom(false)\n            })\n    }\n\n    return (\n        <div role=\"button\" className={[\"chat-label\", active && \"active\"].join(\" \")} onClick={onClick} >\n            {title}\n            <span className=\"delete\" onClick={handleDelete}>\n                {isDeletingChatRoom ? (\n                    <FontAwesomeIcon icon={faCircleNotch} spin />\n                ) : (\n                    <FontAwesomeIcon icon={faTrash} />\n                )}\n            </span>\n        </div>\n    )\n}\n","\n\nexport default function AIMessage({ content })\n{\n    const parsedContent = content.split(\"\\n\").map((str, i) => <p key={i}>{str}</p>)\n\n    return (\n        <div className=\"message ai-message\">\n            {parsedContent}\n        </div>\n    )\n}\n","\n\nexport default function UserMessage({ content })\n{\n    return (\n        <div className=\"message user-message\">\n            {content}\n        </div>\n    )\n}\n","\nexport default function SpinnerGrow({ size, className, ...rest })\n{\n    let extraClasses = \"\"\n    if (size === \"sm\")\n        extraClasses += \"spinner-grow-sm\"\n\n    return <span className={[\"spinner-grow\", extraClasses, className].join(\" \")} {...rest} role=\"status\" aria-hidden=\"true\"></span>\n}\n","import SpinnerGrow from \"../SpinnerGrow\";\n\n\nexport default function PlaceholderMessage({ content }) {\n    return (\n        <div className=\"message ai-message\">\n            <SpinnerGrow size=\"sm\" /> {content ? content : \" Thinking...\"}\n        </div>\n    )\n}\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport SuperButton from \"../SuperButton\";\nimport AIMessage from \"./AIMessage\";\nimport UserMessage from \"./UserMessage\";\nimport { faPaperPlane, faStop, faTrashCan } from \"@fortawesome/free-solid-svg-icons\";\nimport SectionLoading from \"../SectionLoading\";\nimport useChatRoom from \"../../hooks/account\";\nimport { toast } from \"react-toastify\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useQueryClient } from \"react-query\";\nimport { clearChatHistory, sendPrompt, stopPrompt } from \"../../api/account\";\nimport PlaceholderMessage from \"./PlaceholderMessage\";\nimport { useDemo, useNaiveLocalStorage, useScrollToRef } from \"../../hooks\";\nimport { OverlayTrigger, Tooltip } from \"react-bootstrap\";\n\n\nexport default function ChatSection({ uuid })\n{\n    // const { uuid } = useParams()\n    const { isDemo } = useDemo()\n    const [getDemoSubscription, setDemoSubscription] = useNaiveLocalStorage(\"demo_sub\")\n    const demoSubscription = getDemoSubscription()\n\n    const queryClient = useQueryClient()\n    const { isLoading, isError, error, chat } = useChatRoom(uuid)\n    const [ chatHistory, setChatHistory ] = useState([])\n    const [ prompt, setPrompt ] = useState(\"\")\n    const [ isSending, setSending ] = useState(false)\n    const [isClearingChatHistory, setClearingChatHistory ] = useState(false)\n    const [promptRef, scrollToPrompt] = useScrollToRef()\n\n    const DEFAULT_MESSAGE = <AIMessage key={Math.random()} content=\"Hi, How can I assist you today? 😄 \" />\n\n    useEffect(() => {\n        if (chat?.chat_history)\n        {\n            try\n            {\n                let messages = []\n                JSON.parse(chat?.chat_history).map((history, i) => {\n                    if (history.type === \"ai\")\n                        messages[i] = <AIMessage key={i} content={history.content} />\n                    else\n                        messages[i] = <UserMessage key={i} content={history.content} />\n                })\n\n                setChatHistory([DEFAULT_MESSAGE, ...messages])\n            } catch (error){\n                console.log(\"error parsing chat history\")\n            }\n        }\n        else\n        {\n            setChatHistory([DEFAULT_MESSAGE])\n        }\n\n        scrollToPrompt()\n    }, [isLoading, chat])\n\n    useEffect(() => {\n        scrollToPrompt()\n    }, [])\n\n\n    const handleSubmit = useCallback((e) => {\n        e.preventDefault()\n        if (!prompt.trim())\n        {\n            return toast.warning(\"Please ask something.\")\n        }\n\n        if (isDemo && demoSubscription?.questions <= 0)\n        {\n            return toast.warning(\"The demo quota is exceeded, please wait 12 hours 🙏\")\n        }\n\n        setSending(true)\n\n        setChatHistory(chatHistory => {\n            return [\n                ...chatHistory,\n                <UserMessage key={Math.random()} content={prompt} />,\n                <PlaceholderMessage key={Math.random()} />\n            ]\n        })\n        setPrompt(\"\") // clear the prompt\n        scrollToPrompt()\n\n        sendPrompt(uuid, prompt).then(data => {\n            if (!data?.errors) {\n                const reply = data?.response?.output?.trim()\n\n                if (!reply)\n                {\n                    toast.error(\"OpenAI servers are overloaded, please try again or later\")\n                }\n\n                setChatHistory(chatHistory => {\n                    // remove the PlaceholderMessage first, before appending the reply\n                    return [...(chatHistory.slice(0, -1)), <AIMessage key={Math.random()} content={reply} />]\n                })\n\n                // invalidate subscription cache\n                queryClient.invalidateQueries(\"user.subscription\")\n\n                // for demo only\n                if (isDemo) {\n                    setDemoSubscription(prev => {\n                        return {\n                            ...prev,\n                            questions: prev.questions - 1\n                        }\n                    })\n                }\n            }\n            else {\n                toast.error(data.message)\n                setChatHistory(chatHistory => {\n                    // remove the PlaceholderMessage first, before appending the reply\n                    return chatHistory.slice(0, -1)\n                })\n            }\n        }).catch(err => {\n            if (err.response?.data?.message)\n            {\n                toast.warning(err.response?.data?.message)\n            }\n            else\n            {\n                toast.error(err.message)\n            }\n\n            setChatHistory(chatHistory => {\n                // remove the PlaceholderMessage first, before appending the reply\n                return chatHistory.slice(0, -1)\n            })\n        }).finally(() => {\n            setSending(false)\n            queryClient.invalidateQueries(`user.chat.${uuid}`)\n            // scroll down\n            scrollToPrompt()\n        })\n    }, [uuid, prompt])\n\n    const handleStop = useCallback((e) => {\n\n        stopPrompt(uuid).then(req => {\n            console.log(\"prompt stopped\")\n        }).catch (err => {\n            if (err.response.status === 422 || err.response.status === 400) {\n                toast.warning(err.response?.data?.message)\n            }\n            else\n            {\n                toast.error(err.message)\n            }\n        }).finally(() => {\n\n        })\n        // reset the prompt input\n        setSending(false)\n        setChatHistory(chatHistory => {\n            // remove the PlaceholderMessage\n            return chatHistory.slice(0, -1)\n        })\n    }, [uuid])\n\n    const handleClearChatHistory = useCallback(() => {\n        setClearingChatHistory(true)\n\n        clearChatHistory(uuid).then(req => {\n            if (req.status === 204)\n            {\n                toast.success(\"Cleared successfully.\")\n                queryClient.invalidateQueries(`user.chat.${uuid}`)\n                setChatHistory([DEFAULT_MESSAGE])\n            }\n            else\n            {\n                toast.warning(\"Something went wrong!\")\n            }\n        }).catch(err => {\n            toast.error(err)\n        }).finally(() => {\n            setClearingChatHistory(false)\n        })\n    }, [uuid])\n\n\n    if (isLoading)\n    {\n        return <SectionLoading center={true} />\n    }\n\n    if (isError)\n    {\n        toast.error(error)\n    }\n\n\n    return (\n        <>\n            <div className=\"chats flex-grow-1 d-flex align-items-end\">\n                <div className=\"container px-4\">\n                    {chatHistory.map((message, i) => message)}\n                </div>\n            </div>\n            <div className=\"container prompt-input d-flex gap-2 pt-5 pb-4 px-4\" ref={promptRef}>\n                <form onSubmit={handleSubmit} className=\"flex-grow-1\">\n                    <input type=\"text\" value={prompt} onChange={(e) => setPrompt(e.target.value)} className=\"form-control form-control-lg\" placeholder=\"Ask anything...\" />\n                </form>\n\n                <OverlayTrigger\n                    placement=\"top\"\n                    delay={{ show: 250, hide: 400 }}\n                    overlay={(props) => (\n                        <Tooltip id=\"button-tooltip\" {...props}>\n                            {isSending ? \"Stop\" : \"Send\"}\n                        </Tooltip>\n                    )}\n                >\n                    <SuperButton className={[\"btn btn-lg send\", (isSending ? \"btn-danger\" : \"btn-primary\")].join(\" \")} title={isSending ? \"Stop\" : \"Send\"} onClick={(e) => {\n                        if (isSending)\n                            return handleStop(e)\n                        handleSubmit(e)\n                    }}>\n                        {isSending ? (\n                            <FontAwesomeIcon icon={faStop} />\n                        ) : (\n                            <FontAwesomeIcon icon={faPaperPlane} />\n                        )}\n                    </SuperButton>\n                </OverlayTrigger>\n\n                <OverlayTrigger\n                    placement=\"top\"\n                    delay={{ show: 250, hide: 400 }}\n                    overlay={(props) => (\n                        <Tooltip id=\"button-tooltip\" {...props}>\n                            Clear Chat History\n                        </Tooltip>\n                    )}\n                >\n                    <SuperButton className=\"btn btn-secondary clear-history\" isLoading={isClearingChatHistory} title=\"Clear Chat History\" onClick={handleClearChatHistory}><FontAwesomeIcon icon={faTrashCan} /></SuperButton>\n                </OverlayTrigger>\n            </div>\n            <div className=\"container px-4 mb-2\">\n                <small>\n                    <b>Note:</b> if the chat bot said that he doesn't have access to document or doesn't know where to look up, just tell him \"<b><i>from document?</i></b>\".\n                </small>\n            </div>\n        </>\n    )\n}\n","import { faBarsStaggered, faChevronRight, faGem, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport Dropzone from \"../components/Dropzone\"\nimport { Sidebar } from 'react-pro-sidebar';\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useDemo, useEventListener, useLCInfo, useNaiveLocalStorage } from \"../hooks\";\nimport AvatarPalceholder from \"../components/AvatarPalceholder\";\nimport ChatLabel from \"../components/playground/ChatLabel\";\nimport ChatSection from \"../components/playground/ChatSection\";\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\nimport { useUser } from \"../hooks/auth\";\nimport FullscreenLoading from \"../components/FullscreenLoading\";\nimport { useCurrentSubscription, useUserChatRoomList } from \"../hooks/account\";\nimport { toast } from \"react-toastify\";\nimport { uploadFile } from \"../api\";\nimport { useQueryClient } from \"react-query\";\nimport SpinnerGrow from \"../components/SpinnerGrow\";\nimport { deleteChatRoom } from \"../api/account\";\n\n\nconst onUpload = ({\n    files,\n    setProgress,\n    setIsSuccessUpload,\n    resetDropzone,\n    name,\n    createChatRoom,\n    setProcessing,\n    subscription,\n    isDemo,\n    demoSubscription,\n    setDemoSubscription,\n    queryClient\n }) => {\n\n    if (isDemo && demoSubscription.pdfs <= 0)\n    {\n        resetDropzone()\n        return toast.warning(\"The demo quota is exceeded, please wait 12 hours 🙏\")\n    }\n\n    if (!isDemo)\n    {\n        if (subscription?.status !== 1)\n        {\n            resetDropzone()\n            return toast.warning(\"You need a valid subscription to continue.\")\n        }\n        else if (subscription?.pdfs <= 0)\n        {\n            resetDropzone()\n            return toast.warning(\"You have reached the maximum number of document uploads.\")\n        }\n    }\n\n    uploadFile(\"user/chat\", files[0], {\n        onUploadProgress: (e) => {\n            let perc = e.loaded / e.total * 100\n            setProgress(perc)\n            if (perc >= 100)\n                setProcessing(true)\n        }\n    }).then((res) => {\n\n        if (res.data && !res.data?.errors)\n        {\n            const { chat_room } = res.data\n            // Create a new chat room\n            createChatRoom(chat_room.uuid, chat_room.title)\n            setIsSuccessUpload(true)\n            // to reset everything in the dropzone\n            setTimeout(() => {\n                resetDropzone()\n            }, 5000)\n\n            // for demo only\n            if (isDemo)\n            {\n                setDemoSubscription(prev => {\n                    return {\n                        ...prev,\n                        pdfs: prev.pdfs - 1\n                    }\n                })\n            }\n\n            // invalidate subscription cache\n            queryClient.invalidateQueries(\"user.subscription\")\n        }\n        else {\n            toast.error(res.data?.message)\n            resetDropzone()\n        }\n\n    }).catch(err => {\n\n        if (err.response.status === 422 || err.response.status == 400) {\n            toast.warning(err.response?.data?.message)\n        }\n        else\n        {\n            toast.error(err.message)\n        }\n        resetDropzone()\n    }).finally(() => {\n        setProcessing(false)\n    })\n\n}\n\nconst onError = (rejectedFiles) => {\n    toast.error(\"Invalid document!\")\n}\n\n\nexport default function PlaygroundPage()\n{\n    const { isDemo } = useDemo()\n    const [ getDemoSubscription, setDemoSubscription ] = useNaiveLocalStorage(\"demo_sub\", {\n        pdfs: 2,\n        questions: 10,\n        created_at: new Date().getTime()\n    })\n\n    const demoSubscription = getDemoSubscription()\n    const { isExtendedLicense: isEL } = useLCInfo()\n\n    const [ toggled, setToggled ] = useState(false)\n    const [ collapsed, setCollapsed ] = useState(false)\n    const [windowInnerWidth, setWindowInnerWidth] = useEventListener('resize', window.innerWidth, () => window.innerWidth)\n\n    const { user } = useUser()\n    const { isLoading: isSubscriptionLoading, subscription } = useCurrentSubscription()\n\n    const queryClient = useQueryClient()\n    const navigate = useNavigate()\n    const { uuid } = useParams()\n    const [ currentChatRoomUUID, setCurrentChatRoomUUID ] = useState(uuid)\n\n    const { isLoading, isError, error, userChatRoomList } = useUserChatRoomList()\n    const [ isProcessing, setProcessing ] = useState(false)\n\n    const handleChatLabelClick = useCallback((uuid) => {\n        setCurrentChatRoomUUID(uuid)\n        navigate(`/playground/${uuid}`)\n    }, [uuid])\n\n    const createChatRoom = useCallback((uuid, title) => {\n        queryClient.invalidateQueries(\"user.chat.list\")\n        setCurrentChatRoomUUID(uuid)\n        navigate(`/playground/${uuid}`)\n    }, [uuid])\n\n    const handleChatRoomDeletion = useCallback((uuid, callback) => {\n\n        deleteChatRoom(uuid).then(req => {\n            if (req.status === 204) {\n                queryClient.invalidateQueries(\"user.chat.list\")\n                toast.success(\"Deleted successfully.\")\n            }\n            else {\n                toast.warning(\"Something went wrong!\")\n            }\n        }).catch(err => {\n            toast.error(err)\n        }).finally(() => {\n            callback()\n        })\n    }, [uuid])\n\n    useEffect(() => {\n        if ((!uuid || !currentChatRoomUUID) && userChatRoomList !== undefined && Object.keys(userChatRoomList).length) {\n            // return <Navigate to={`/playground/${userChatRoomList[0]?.uuid}`} replace={true} />\n            navigate(`/playground/${userChatRoomList[0]?.uuid}`)\n            setCurrentChatRoomUUID(userChatRoomList[0]?.uuid)\n        }\n        else if (userChatRoomList !== undefined && !Object.keys(userChatRoomList).length)\n        {\n            setCurrentChatRoomUUID(\"\")\n            navigate(`/playground`)\n        }\n    }, [uuid, userChatRoomList])\n\n    useEffect(() => {\n        if (new Date().getTime() - demoSubscription.created_at > (12 * 60 * 60 * 1000)) // 12 hours\n        {\n            // reset the demo subscription\n            setDemoSubscription({\n                pdfs: 2,\n                questions: 10,\n                created_at: new Date().getTime()\n            })\n        }\n    }, [])\n\n    if (isError)\n    {\n        toast.error(error)\n    }\n\n    if (!Object.keys(user).length || isLoading || isSubscriptionLoading)\n    {\n        return <FullscreenLoading />\n    }\n\n\n    return (\n        <>\n            <main className=\"playground\">\n                <Sidebar toggled={toggled} collapsed={collapsed} breakPoint=\"md\" onBackdropClick={() => setToggled(!toggled)} backgroundColor=\"\" className=\"\">\n                    <div className=\"playground-sidebar\">\n                        {(subscription || demoSubscription) && (\n                            <Dropzone onUpload={onUpload} onError={onError} name=\"pdf-file\"\n                            extraOnUploadProps={{\n                                createChatRoom,\n                                setProcessing,\n                                subscription,\n                                isDemo,\n                                demoSubscription,\n                                setDemoSubscription,\n                                queryClient,\n                            }} dropzoneOptions={{\n                                accept: { 'application/pdf': ['.pdf'] },\n                                maxSize: 50 * 1024 * 1024, // (in bytes) 50 MB\n                            }} >\n                                {isProcessing ? (\n                                    <div className=\"text-center\">\n                                        <b><SpinnerGrow size=\"sm\" /> Processing...</b>\n                                    </div>\n                                ) : (\n                                    collapsed ? (\n                                        <FontAwesomeIcon icon={faPlus} />\n                                    ) : (\n                                        <div className=\"text-center\">\n                                            <b><FontAwesomeIcon icon={faPlus} /> New Chat</b>\n                                            <p>Drag & Drop your PDF</p>\n                                        </div>\n                                    )\n                                )}\n                            </Dropzone>\n                        )}\n\n                        <div className=\"chat-labels-list my-3\">\n                            {userChatRoomList?.map((chat, i) => {\n                                return <ChatLabel\n                                    key={i}\n                                    title={chat.title}\n                                    onClick={() => handleChatLabelClick(chat.uuid)}\n                                    onDelete={(callback) => handleChatRoomDeletion(chat.uuid, callback)}\n                                    active={chat.uuid === currentChatRoomUUID}\n                                    />\n                            })}\n                        </div>\n\n                        <div className=\"sidebar-bottom-section\">\n                            {isDemo && (\n                                <>\n                                    {(subscription?.questions <= 20 || subscription?.pdfs <= 10) && (\n                                        <Link to=\"/account/settings/subscription\" className=\"btn btn-warning btn-lg btn-block\"><FontAwesomeIcon icon={faGem} /> Upgrade</Link>\n                                    )}\n\n                                    <div className=\"quota\">\n                                        <small>- Quota limited for demo only.</small><br />\n                                        <small>- Quota reset every 12 hours.</small>\n                                        <h3 className=\"h6\">Quota:</h3>\n                                        <span>{demoSubscription?.pdfs} PDFs</span><br />\n                                        <span>Max PDF size: {subscription?.pdf_size}MB/pdf</span><br />\n                                        <span>{demoSubscription?.questions} PDF Questions</span><br />\n                                    </div>\n                                </>\n                            )}\n\n                            {subscription && isEL && !isDemo && (\n                                <>\n                                    {(subscription?.questions <= 20 || subscription?.pdfs <= 10) && (\n                                        <Link to=\"/account/settings/subscription\" className=\"btn btn-warning btn-lg btn-block\"><FontAwesomeIcon icon={faGem} /> Upgrade</Link>\n                                    )}\n\n                                    <div className=\"quota\">\n                                        <h3 className=\"h6\">Quota:</h3>\n                                        <span>{subscription?.pdfs} PDFs</span><br />\n                                        <span>Max PDF size: {subscription?.pdf_size}MB/pdf</span><br />\n                                        <span>{subscription?.questions} PDF Questions</span><br />\n                                    </div>\n                                </>\n                            )}\n                            {user && (\n                                <div className=\"profile\" onClick={() => navigate(\"/account/settings\")}>\n                                    <AvatarPalceholder username={user.username} size={45} />\n                                    <div>\n                                        <b>{user.username}</b><br />\n                                        <span>({user.email})</span>\n                                    </div>\n                                    <FontAwesomeIcon icon={faChevronRight} />\n                                </div>\n                            )}\n\n                            <footer>\n                                <Link to=\"/\">Home</Link>\n                                {isEL && (\n                                    <Link to=\"/pricing\">Pricing</Link>\n                                )}\n                                <Link to=\"/contact\">Contact us</Link>\n                            </footer>\n\n                        </div>\n                    </div>\n\n                </Sidebar>\n\n                <section className=\"playground-chat-section\">\n                    {windowInnerWidth <= 768 && (\n                        <button type=\"button\" onClick={() => setToggled(toggled => !toggled)} className=\"btn btn-light toggle-sidebar-button text-primary\"><FontAwesomeIcon icon={faBarsStaggered} /></button>\n                    )}\n\n                    <section className=\"d-flex flex-column\">\n                        {isEL ? (\n                            (subscription && subscription?.status == 1 || isDemo) ? (\n                                subscription?.questions <= 0 ? (\n                                    <div className=\"d-flex flex-column justify-content-start p-5\">\n                                        Your subscription has reached its maximum usage.\n                                        <Link to=\"/pricing\" className=\"btn btn-warning my-3\">Upgrade Now?</Link>\n                                    </div>\n                                ) : (\n                                    currentChatRoomUUID && (\n                                        <ChatSection uuid={currentChatRoomUUID} key={uuid} />\n                                    )\n                                )\n                            ) : (\n                                <div className=\"d-flex flex-column justify-content-start p-5\">\n                                    You need to have a subscription in order to be able to use the Playground section.\n                                    <Link to=\"/pricing\" className=\"btn btn-warning my-3\">Get a subscription now?</Link>\n                                </div>\n                            )\n                        ) : (\n                            currentChatRoomUUID && (\n                                <ChatSection uuid={currentChatRoomUUID} key={uuid} />\n                            )\n                        )}\n                    </section>\n                </section>\n            </main>\n        </>\n    )\n}\n"],"names":["ChatLabel","_ref","title","onClick","onDelete","_ref$active","active","_useState","useState","_useState2","_slicedToArray","isDeletingChatRoom","setDeletingChatRoom","_jsxs","role","className","join","children","_jsx","FontAwesomeIcon","icon","faCircleNotch","spin","faTrash","AIMessage","parsedContent","content","split","map","str","i","UserMessage","SpinnerGrow","size","rest","_objectWithoutProperties","_excluded","extraClasses","_objectSpread","PlaceholderMessage","ChatSection","uuid","isDemo","useDemo","_useNaiveLocalStorage","useNaiveLocalStorage","_useNaiveLocalStorage2","getDemoSubscription","setDemoSubscription","demoSubscription","queryClient","useQueryClient","_useChatRoom","useChatRoom","isLoading","isError","error","chat","chatHistory","setChatHistory","_useState3","_useState4","prompt","setPrompt","_useState5","_useState6","isSending","setSending","_useState7","_useState8","isClearingChatHistory","setClearingChatHistory","_useScrollToRef","useScrollToRef","_useScrollToRef2","promptRef","scrollToPrompt","DEFAULT_MESSAGE","Math","random","useEffect","chat_history","messages","JSON","parse","history","type","concat","console","log","handleSubmit","useCallback","e","preventDefault","trim","questions","toast","_toConsumableArray","sendPrompt","then","data","errors","message","slice","_data$response","_data$response$output","reply","response","output","invalidateQueries","prev","catch","err","_err$response","_err$response$data","_err$response2","_err$response2$data","finally","handleStop","stopPrompt","req","_err$response3","_err$response3$data","status","handleClearChatHistory","clearChatHistory","SectionLoading","center","_Fragment","ref","onSubmit","value","onChange","target","placeholder","OverlayTrigger","placement","delay","show","hide","overlay","props","Tooltip","id","SuperButton","faStop","faPaperPlane","faTrashCan","onUpload","files","setProgress","setIsSuccessUpload","resetDropzone","createChatRoom","name","setProcessing","subscription","pdfs","uploadFile","onUploadProgress","perc","loaded","total","res","_res$data","_res$data2","chat_room","setTimeout","onError","rejectedFiles","PlaygroundPage","created_at","Date","getTime","isEL","useLCInfo","isExtendedLicense","toggled","setToggled","collapsed","_useEventListener","useEventListener","window","innerWidth","_useEventListener2","windowInnerWidth","user","useUser","_useCurrentSubscripti","useCurrentSubscription","isSubscriptionLoading","navigate","useNavigate","useParams","currentChatRoomUUID","setCurrentChatRoomUUID","_useUserChatRoomList","useUserChatRoomList","userChatRoomList","isProcessing","handleChatLabelClick","handleChatRoomDeletion","callback","deleteChatRoom","_userChatRoomList$","_userChatRoomList$2","undefined","Object","keys","length","FullscreenLoading","Sidebar","breakPoint","onBackdropClick","backgroundColor","Dropzone","extraOnUploadProps","dropzoneOptions","accept","maxSize","faPlus","Link","to","faGem","pdf_size","AvatarPalceholder","username","email","faChevronRight","faBarsStaggered"],"sourceRoot":""}