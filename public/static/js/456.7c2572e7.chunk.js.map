{"version":3,"file":"static/js/456.7c2572e7.chunk.js","mappings":"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","sources":["components/playground/ChatLabel.jsx","components/playground/AIMessage.jsx","components/playground/UserMessage.jsx","components/playground/PlaceholderMessage.jsx","components/playground/ChatSection.jsx","pages/PlaygroundPage.jsx"],"sourcesContent":["import { faCircleNotch, faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { useState } from \"react\";\nimport TablerIcon from \"../TablerIcon\";\nimport { IconMessageDots, IconTrash } from \"@tabler/icons-react\";\n\n\nexport default function ChatLabel({ title, onClick, onDelete, active=false })\n{\n    const [isDeletingChatRoom, setDeletingChatRoom] = useState(false)\n\n    const handleDelete = () => {\n        setDeletingChatRoom(true)\n        if (typeof onDelete === \"function\")\n            onDelete(() => {\n                setDeletingChatRoom(false)\n            })\n    }\n\n    return (\n        <div role=\"button\" className={[\"chat-label\", active && \"active\"].join(\" \")} onClick={onClick} >\n            <TablerIcon icon={IconMessageDots} stroke={1.25} /> {title}\n            <span className=\"delete\" onClick={handleDelete}>\n                {isDeletingChatRoom ? (\n                    <FontAwesomeIcon icon={faCircleNotch} spin />\n                ) : (\n                    <TablerIcon icon={IconTrash} stroke={1.25} />\n                )}\n            </span>\n        </div>\n    )\n}\n","import AIAvatar from \"@images/playground/AI-avatar.png\"\nimport Markdown from 'react-markdown'\n\n\nexport default function AIMessage({ content })\n{\n    // const parsedContent = content.split(\"\\n\").map((str, i) => <p key={i}>{str}</p>)\n\n    return (\n        <div className=\"message ai-message\">\n            <img src={AIAvatar} className=\"avatar\" />\n\n            <Markdown>{content}</Markdown>\n        </div>\n    )\n}\n","\n\nexport default function UserMessage({ content })\n{\n    return (\n        <div className=\"message user-message\">\n            {content}\n        </div>\n    )\n}\n","import SpinnerGrow from \"../SpinnerGrow\";\n\n\nexport default function PlaceholderMessage({ content }) {\n    return (\n        <div className=\"message ai-message\">\n            <SpinnerGrow size=\"sm\" /> {content ? content : \" Thinking...\"}\n        </div>\n    )\n}\n","\nimport SuperButton from \"../SuperButton\";\nimport AIMessage from \"./AIMessage\";\nimport UserMessage from \"./UserMessage\";\nimport SectionLoading from \"../SectionLoading\";\nimport useChatRoom from \"../../hooks/account\";\nimport { toast } from \"react-toastify\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useQueryClient } from \"react-query\";\nimport { clearChatHistory, sendPrompt, stopPrompt } from \"../../api/account\";\nimport PlaceholderMessage from \"./PlaceholderMessage\";\nimport { useDemo, useNaiveLocalStorage, useScrollToRef } from \"../../hooks\";\nimport { OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport TablerIcon from \"../TablerIcon\";\nimport { IconPlayerStopFilled, IconSend, IconTrash } from \"@tabler/icons-react\";\n\n\nexport default function ChatSection({ uuid })\n{\n    const { isDemo } = useDemo()\n    const [getDemoSubscription, setDemoSubscription] = useNaiveLocalStorage(\"demo_sub\")\n    const demoSubscription = getDemoSubscription()\n\n    const queryClient = useQueryClient()\n    const { isLoading, isError, error, chat } = useChatRoom(uuid)\n    const [ chatHistory, setChatHistory ] = useState([])\n    const [ prompt, setPrompt ] = useState(\"\")\n    const [ isSending, setSending ] = useState(false)\n    const [isClearingChatHistory, setClearingChatHistory ] = useState(false)\n    const [promptRef, scrollToPrompt] = useScrollToRef()\n\n    useEffect(() => {\n        if (chat?.chat_history)\n        {\n            try\n            {\n                let messages = []\n                JSON.parse(chat?.chat_history).map((history, i) => {\n                    if (history.type === \"ai\")\n                        messages[i] = <AIMessage key={i} content={history.content} />\n                    else\n                        messages[i] = <UserMessage key={i} content={history.content} />\n                })\n\n                setChatHistory(messages)\n            } catch (error){\n                console.log(\"error parsing chat history\")\n            }\n        }\n        else\n        {\n            setChatHistory([])\n        }\n\n        scrollToPrompt()\n    }, [isLoading, chat])\n\n    useEffect(() => {\n        scrollToPrompt()\n    }, [])\n\n\n    const handleSubmit = useCallback((e) => {\n        e.preventDefault()\n        if (!prompt.trim())\n        {\n            return toast.warning(\"Please ask something.\")\n        }\n\n        if (isDemo && demoSubscription?.questions <= 0)\n        {\n            return toast.warning(\"The demo quota is exceeded, please wait 12 hours 🙏\")\n        }\n\n        setSending(true)\n\n        setChatHistory(chatHistory => {\n            return [\n                ...chatHistory,\n                <UserMessage key={Math.random()} content={prompt} />,\n                <PlaceholderMessage key={Math.random()} />\n            ]\n        })\n        setPrompt(\"\") // clear the prompt\n        scrollToPrompt()\n\n        sendPrompt(uuid, prompt).then(data => {\n            if (!data?.errors) {\n                const reply = data?.response?.output?.trim()\n\n                if (!reply)\n                {\n                    toast.error(\"OpenAI servers are overloaded, please try again or later\")\n                }\n\n                setChatHistory(chatHistory => {\n                    // remove the PlaceholderMessage first, before appending the reply\n                    return [...(chatHistory.slice(0, -1)), <AIMessage key={Math.random()} content={reply} />]\n                })\n\n                // invalidate subscription cache\n                queryClient.invalidateQueries(\"user.subscription\")\n\n                // for demo only\n                if (isDemo) {\n                    setDemoSubscription(prev => {\n                        return {\n                            ...prev,\n                            questions: prev.questions - 1\n                        }\n                    })\n                }\n            }\n            else {\n                toast.error(data.message)\n                setChatHistory(chatHistory => {\n                    // remove the PlaceholderMessage first, before appending the reply\n                    return chatHistory.slice(0, -1)\n                })\n            }\n        }).catch(err => {\n            if (err.response?.data?.message)\n            {\n                toast.warning(err.response?.data?.message)\n            }\n            else\n            {\n                toast.error(err.message)\n            }\n\n            setChatHistory(chatHistory => {\n                // remove the PlaceholderMessage first, before appending the reply\n                return chatHistory.slice(0, -1)\n            })\n        }).finally(() => {\n            setSending(false)\n            queryClient.invalidateQueries(`user.chat.${uuid}`)\n            // scroll down\n            scrollToPrompt()\n        })\n    }, [uuid, prompt])\n\n    const handleStop = useCallback((e) => {\n\n        stopPrompt(uuid).then(req => {\n            console.log(\"prompt stopped\")\n        }).catch (err => {\n            if (err.response.status === 422 || err.response.status === 400) {\n                toast.warning(err.response?.data?.message)\n            }\n            else\n            {\n                toast.error(err.message)\n            }\n        }).finally(() => {\n\n        })\n        // reset the prompt input\n        setSending(false)\n        setChatHistory(chatHistory => {\n            // remove the PlaceholderMessage\n            return chatHistory.slice(0, -1)\n        })\n    }, [uuid])\n\n    const handleClearChatHistory = useCallback(() => {\n        setClearingChatHistory(true)\n\n        clearChatHistory(uuid).then(req => {\n            if (req.status === 204)\n            {\n                toast.success(\"Cleared successfully.\")\n                queryClient.invalidateQueries(`user.chat.${uuid}`)\n                setChatHistory([])\n            }\n            else\n            {\n                toast.warning(\"Something went wrong!\")\n            }\n        }).catch(err => {\n            toast.error(err)\n        }).finally(() => {\n            setClearingChatHistory(false)\n        })\n    }, [uuid])\n\n\n    if (isLoading)\n    {\n        return <SectionLoading center={true} />\n    }\n\n    if (isError)\n    {\n        toast.error(error)\n    }\n\n\n    return (\n        <>\n            <div className=\"chats flex-grow-1 d-flex align-items-end\">\n                <div className=\"container px-4\">\n                    {chatHistory.map((message, i) => message)}\n                </div>\n            </div>\n            <div className=\"container prompt-input d-flex gap-2 pt-5 pb-4 px-4\" ref={promptRef}>\n                <form onSubmit={handleSubmit} className=\"flex-grow-1\">\n                    <input type=\"text\" value={prompt} onChange={(e) => setPrompt(e.target.value)} className=\"form-control form-control-lg\" placeholder=\"Ask your document a question?\" />\n                </form>\n\n                <OverlayTrigger\n                    placement=\"top\"\n                    delay={{ show: 250, hide: 400 }}\n                    overlay={(props) => (\n                        <Tooltip id=\"button-tooltip\" {...props}>\n                            {isSending ? \"Stop\" : \"Send\"}\n                        </Tooltip>\n                    )}\n                >\n                    <SuperButton disabled={!prompt && !isSending} className={[\"btn btn-sm send\", (isSending ? \"btn-danger\" : \"btn-primary\")].join(\" \")} title={isSending ? \"Stop\" : \"Send\"} onClick={(e) => {\n                        if (isSending)\n                            return handleStop(e)\n                        handleSubmit(e)\n                    }}>\n                        {isSending ? (\n                            <TablerIcon icon={IconPlayerStopFilled} />\n                        ) : (\n                            <TablerIcon icon={IconSend} />\n                        )}\n                    </SuperButton>\n                </OverlayTrigger>\n\n                <OverlayTrigger\n                    placement=\"top\"\n                    delay={{ show: 250, hide: 400 }}\n                    overlay={(props) => (\n                        <Tooltip id=\"button-tooltip\" {...props}>\n                            Clear Chat History\n                        </Tooltip>\n                    )}\n                >\n                    <SuperButton className=\"btn btn-outline-secondary clear-history\" isLoading={isClearingChatHistory} title=\"Clear Chat History\" onClick={handleClearChatHistory}><TablerIcon icon={IconTrash} /></SuperButton>\n                </OverlayTrigger>\n            </div>\n        </>\n    )\n}\n","import { faBarsStaggered, faChevronRight, faGem, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport Dropzone from \"../components/Dropzone\"\nimport { Sidebar } from 'react-pro-sidebar';\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useDemo, useEventListener, useLCInfo, useNaiveLocalStorage } from \"../hooks\";\nimport AvatarPalceholder from \"../components/AvatarPalceholder\";\nimport ChatLabel from \"../components/playground/ChatLabel\";\nimport ChatSection from \"../components/playground/ChatSection\";\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\nimport { useUser } from \"../hooks/auth\";\nimport FullscreenLoading from \"../components/FullscreenLoading\";\nimport { useCurrentSubscription, useUserChatRoomList } from \"../hooks/account\";\nimport { toast } from \"react-toastify\";\nimport { uploadFile } from \"../api\";\nimport { useQueryClient } from \"react-query\";\nimport SpinnerGrow from \"../components/SpinnerGrow\";\nimport { deleteChatRoom } from \"../api/account\";\nimport TablerIcon from \"../components/TablerIcon\";\nimport { IconBolt, IconCloudUpload, IconSparkles } from \"@tabler/icons-react\";\nimport { DEMO_SUBSCRIPTION, DEMO_SUBSCRIPTION_EXPIRE, getAvailableDocumentTypes, getAvailableDocumentTypesString } from \"@utils/index\";\n\n\nconst onUpload = ({\n    files,\n    setProgress,\n    setIsSuccessUpload,\n    resetDropzone,\n    name,\n    createChatRoom,\n    setProcessing,\n    subscription,\n    isDemo,\n    demoSubscription,\n    setDemoSubscription,\n    queryClient\n }) => {\n\n    if (isDemo && demoSubscription.pdfs <= 0)\n    {\n        resetDropzone()\n        return toast.warning(\"The demo quota is exceeded, please wait 12 hours 🙏\")\n    }\n\n    if (!isDemo)\n    {\n        if (subscription?.status !== 1)\n        {\n            resetDropzone()\n            return toast.warning(\"You need a valid subscription to continue.\")\n        }\n        else if (subscription?.pdfs <= 0)\n        {\n            resetDropzone()\n            return toast.warning(\"You have reached the maximum number of document uploads.\")\n        }\n    }\n\n    uploadFile(\"user/chat\", files[0], {\n        onUploadProgress: (e) => {\n            let perc = e.loaded / e.total * 100\n            setProgress(perc)\n            if (perc >= 100)\n                setProcessing(true)\n        }\n    }).then((res) => {\n\n        if (res.data && !res.data?.errors)\n        {\n            const { chat_room } = res.data\n            // Create a new chat room\n            createChatRoom(chat_room.uuid, chat_room.title)\n            setIsSuccessUpload(true)\n            // to reset everything in the dropzone\n            setTimeout(() => {\n                resetDropzone()\n            }, 5000)\n\n            // for demo only\n            if (isDemo)\n            {\n                setDemoSubscription(prev => {\n                    return {\n                        ...prev,\n                        pdfs: prev.pdfs - 1\n                    }\n                })\n            }\n\n            // invalidate subscription cache\n            queryClient.invalidateQueries(\"user.subscription\")\n        }\n        else {\n            toast.error(res.data?.message)\n            resetDropzone()\n        }\n\n    }).catch(err => {\n\n        if (err.response.status === 422 || err.response.status == 400) {\n            toast.warning(err.response?.data?.message)\n        }\n        else\n        {\n            toast.error(err.message)\n        }\n        resetDropzone()\n    }).finally(() => {\n        setProcessing(false)\n    })\n\n}\n\nconst onError = (rejectedFiles) => {\n    toast.error(\"Invalid document!\")\n}\n\n\nexport default function PlaygroundPage()\n{\n    const { isDemo } = useDemo()\n    const [ getDemoSubscription, setDemoSubscription ] = useNaiveLocalStorage(\"demo_sub\", DEMO_SUBSCRIPTION)\n\n    const demoSubscription = isDemo ? getDemoSubscription() : null;\n    const { isExtendedLicense: isEL } = useLCInfo()\n\n    const [ toggled, setToggled ] = useState(false)\n    const [ collapsed, setCollapsed ] = useState(false)\n    const [windowInnerWidth, setWindowInnerWidth] = useEventListener('resize', window.innerWidth, () => window.innerWidth)\n\n    const { user } = useUser()\n    const { isLoading: isSubscriptionLoading, subscription } = useCurrentSubscription()\n\n    const queryClient = useQueryClient()\n    const navigate = useNavigate()\n    const { uuid } = useParams()\n    const [ currentChatRoomUUID, setCurrentChatRoomUUID ] = useState(uuid)\n\n    const { isLoading, isError, error, userChatRoomList } = useUserChatRoomList()\n    const [ isProcessing, setProcessing ] = useState(false)\n\n    useEffect(() => {\n        if (uuid !== currentChatRoomUUID)\n            navigate(`/playground/${currentChatRoomUUID}`)\n    }, [currentChatRoomUUID])\n\n    const handleChatLabelClick = useCallback((uuid) => {\n        setCurrentChatRoomUUID(uuid)\n        navigate(`/playground/${uuid}`)\n    }, [uuid])\n\n    const createChatRoom = useCallback((uuid, title) => {\n        queryClient.invalidateQueries(\"user.chat.list\")\n        setCurrentChatRoomUUID(uuid)\n        navigate(`/playground/${uuid}`)\n    }, [uuid])\n\n    const handleChatRoomDeletion = useCallback((uuid, callback) => {\n        let nextUUID = \"\"\n        if (userChatRoomList)\n        {\n            for (const chatroom of userChatRoomList)\n            {\n                if (chatroom?.uuid !== uuid)\n                {\n                    nextUUID = chatroom?.uuid\n                    break\n                }\n            }\n        }\n\n        deleteChatRoom(uuid).then(req => {\n            if (req.status === 204) {\n                toast.success(\"Deleted successfully.\")\n                queryClient.invalidateQueries(\"user.chat.list\").then(() => {\n                    if (nextUUID)\n                        setCurrentChatRoomUUID(nextUUID)\n                })\n            }\n            else {\n                toast.warning(\"Something went wrong!\")\n            }\n        }).catch(err => {\n            toast.error(err)\n        }).finally(() => {\n            callback()\n        })\n    }, [uuid, userChatRoomList])\n\n    useEffect(() => {\n        if ((!uuid || !currentChatRoomUUID) && userChatRoomList !== undefined && Object.keys(userChatRoomList).length) {\n            navigate(`/playground/${userChatRoomList[0]?.uuid}`)\n            setCurrentChatRoomUUID(userChatRoomList[0]?.uuid)\n        }\n        else if (userChatRoomList !== undefined && !Object.keys(userChatRoomList).length)\n        {\n            setCurrentChatRoomUUID(\"\")\n            navigate(`/playground`)\n        }\n    }, [uuid, userChatRoomList])\n\n    useEffect(() => {\n        if (new Date().getTime() - demoSubscription?.created_at > (DEMO_SUBSCRIPTION_EXPIRE * 60 * 60 * 1000)) // 12 hours\n        {\n            // reset the demo subscription\n            setDemoSubscription(DEMO_SUBSCRIPTION)\n        }\n    }, [])\n\n    if (isError)\n    {\n        toast.error(error)\n    }\n\n    if (!Object.keys(user).length || isLoading || isSubscriptionLoading)\n    {\n        return <FullscreenLoading />\n    }\n\n\n    return (\n        <>\n            <main className=\"playground\">\n                <Sidebar width=\"290px\" toggled={toggled} collapsed={collapsed} breakPoint=\"md\" onBackdropClick={() => setToggled(!toggled)} backgroundColor=\"\" className=\"\">\n                    <div className=\"playground-sidebar\">\n                        {(!!userChatRoomList?.length && (subscription || demoSubscription)) && (\n                            <Dropzone onUpload={onUpload} onError={onError} name=\"pdf-file\"\n                            extraOnUploadProps={{\n                                createChatRoom,\n                                setProcessing,\n                                subscription,\n                                isDemo,\n                                demoSubscription,\n                                setDemoSubscription,\n                                queryClient,\n                            }} dropzoneOptions={{\n                                accept: getAvailableDocumentTypes(),\n                                maxSize: 50 * 1024 * 1024, // (in bytes) 50 MB\n                            }} >\n                                {isProcessing ? (\n                                    <div className=\"text-center\">\n                                        <b><SpinnerGrow size=\"sm\" /> Processing...</b>\n                                    </div>\n                                ) : (\n                                    collapsed ? (\n                                        <FontAwesomeIcon icon={faPlus} />\n                                    ) : (\n                                        <div className=\"text-center\">\n                                            <b><FontAwesomeIcon icon={faPlus} /> New Chat</b>\n                                            <p>\n                                                Drag & Drop your Document<br />\n                                                <small>({getAvailableDocumentTypesString()})</small>\n                                            </p>\n                                        </div>\n                                    )\n                                )}\n                            </Dropzone>\n                        )}\n\n                        <div className=\"chat-labels-list my-3\">\n                            {userChatRoomList?.map((chat, i) => {\n                                return <ChatLabel\n                                    key={i}\n                                    title={chat.title}\n                                    onClick={() => handleChatLabelClick(chat.uuid)}\n                                    onDelete={(callback) => handleChatRoomDeletion(chat.uuid, callback)}\n                                    active={chat.uuid === currentChatRoomUUID}\n                                    />\n                            })}\n                        </div>\n\n                        <div className=\"sidebar-bottom-section\">\n                            {isDemo && (\n                                <>\n                                    {(subscription?.questions <= 20 || subscription?.pdfs <= 10) && (\n                                        <Link to=\"/pricing\" className=\"btn btn-warning btn-lg btn-block\"><TablerIcon icon={IconBolt} stroke={1.5} size={30} /> Upgrade</Link>\n                                    )}\n\n                                    <div className=\"quota\">\n                                        <small>- Quota limited for demo only.</small><br />\n                                        <small>- Quota reset every 12 hours.</small>\n                                        <h3 className=\"h6\">Quota:</h3>\n                                        <span><b>{demoSubscription?.pdfs}</b> Documents left</span><br />\n                                        <span><b>{demoSubscription?.questions}</b> Document Questions left</span><br />\n                                        <span>Max Document Size: <b>{subscription?.pdf_size}MB/doc</b></span><br />\n                                    </div>\n                                </>\n                            )}\n\n                            {subscription && isEL && !isDemo && (\n                                <>\n                                    {(subscription?.questions <= 20 || subscription?.pdfs <= 10) && (\n                                        <Link to=\"/pricing\" className=\"btn btn-warning btn-lg btn-block\"><TablerIcon icon={IconBolt} stroke={1.5} size={30} /> Upgrade</Link>\n                                    )}\n\n                                    <div className=\"quota\">\n                                        <h3 className=\"h6\">Available Subscription Quota:</h3>\n                                        <span><b>{subscription?.pdfs}</b> Documents left.</span><br />\n                                        <span><b>{subscription?.questions}</b> Document Questions left.</span><br />\n                                        <span>Max Document Size: <b>{subscription?.pdf_size}MB/doc.</b></span><br />\n                                    </div>\n                                </>\n                            )}\n                            {user && (\n                                <div className=\"profile\" onClick={() => navigate(\"/account/settings\")}>\n                                    <AvatarPalceholder username={user.username} size={45} />\n                                    <div>\n                                        <b>{user.username}</b><br />\n                                        <span>({user.email})</span>\n                                    </div>\n                                    <div className=\"\">\n                                        <FontAwesomeIcon icon={faChevronRight} />\n                                    </div>\n                                </div>\n                            )}\n\n                        </div>\n                    </div>\n\n                </Sidebar>\n\n                <section className=\"playground-chat-section\">\n                    {windowInnerWidth <= 768 && (\n                        <button type=\"button\" onClick={() => setToggled(toggled => !toggled)} className=\"btn btn-light toggle-sidebar-button text-primary\"><FontAwesomeIcon icon={faBarsStaggered} /></button>\n                    )}\n\n                    <section className=\"d-flex flex-column\">\n                        {isEL ? (\n                            (subscription && subscription?.status == 1 || isDemo) ? (\n                                subscription?.questions <= 0 ? (\n                                    <div className=\"d-flex flex-column justify-content-start p-5\">\n                                        Your subscription has reached its maximum usage.\n                                        <Link to=\"/pricing\" className=\"btn btn-warning my-3\">Upgrade Now?</Link>\n                                    </div>\n                                ) : (\n                                    currentChatRoomUUID && (\n                                        <ChatSection uuid={currentChatRoomUUID} key={currentChatRoomUUID} />\n                                    )\n                                )\n                            ) : (\n                                <div className=\"d-flex flex-column justify-content-start p-5 mt-3\">\n                                    You need to have a subscription in order to be able to use the Playground section.\n                                    <Link to=\"/pricing\" className=\"btn btn-warning my-3\">Get a subscription now?</Link>\n                                </div>\n                            )\n                        ) : (\n                            currentChatRoomUUID && (\n                                <ChatSection uuid={currentChatRoomUUID} key={currentChatRoomUUID} />\n                            )\n                        )}\n\n                        {!currentChatRoomUUID && (\n                            <div className=\"d-flex justify-content-center align-items-center h-100\" >\n                                <div className=\"w-50\">\n                                    {(subscription || demoSubscription) && (\n                                        <div className=\"text-center\">\n                                            <h3>Upload your Document to chat with.</h3>\n                                            <Dropzone onUpload={onUpload} onError={onError} name=\"pdf-file\"\n                                                extraOnUploadProps={{\n                                                    createChatRoom,\n                                                    setProcessing,\n                                                    subscription,\n                                                    isDemo,\n                                                    demoSubscription,\n                                                    setDemoSubscription,\n                                                    queryClient,\n                                                }} dropzoneOptions={{\n                                                    accept: getAvailableDocumentTypes(),\n                                                    maxSize: 50 * 1024 * 1024, // (in bytes) 50 MB\n                                                }} >\n                                                {isProcessing ? (\n                                                    <div className=\"text-center\">\n                                                        <b><SpinnerGrow size=\"sm\" /> Processing...</b>\n                                                    </div>\n                                                ) : (\n                                                    collapsed ? (\n                                                        <FontAwesomeIcon icon={faPlus} />\n                                                    ) : (\n                                                        <div className=\"text-center\">\n                                                            <b><TablerIcon icon={IconCloudUpload} size={40} /><br />\n                                                                Upload you Document<br />\n                                                                ({getAvailableDocumentTypesString()})\n                                                            </b>\n                                                            <p>(Drag & Drop)</p>\n                                                        </div>\n                                                    )\n                                                )}\n                                            </Dropzone>\n                                        </div>\n                                    )}\n                                </div>\n                            </div>\n                        )}\n                    </section>\n                </section>\n            </main>\n        </>\n    )\n}\n"],"names":["ChatLabel","_ref","title","onClick","onDelete","active","isDeletingChatRoom","setDeletingChatRoom","useState","_jsxs","role","className","join","children","_jsx","TablerIcon","icon","IconMessageDots","stroke","handleDelete","FontAwesomeIcon","faCircleNotch","spin","IconTrash","AIMessage","content","src","AIAvatar","Markdown","UserMessage","PlaceholderMessage","SpinnerGrow","size","ChatSection","uuid","isDemo","useDemo","getDemoSubscription","setDemoSubscription","useNaiveLocalStorage","demoSubscription","queryClient","useQueryClient","isLoading","isError","error","chat","useChatRoom","chatHistory","setChatHistory","prompt","setPrompt","isSending","setSending","isClearingChatHistory","setClearingChatHistory","promptRef","scrollToPrompt","useScrollToRef","useEffect","chat_history","messages","JSON","parse","map","history","i","type","console","log","handleSubmit","useCallback","e","preventDefault","trim","questions","toast","warning","Math","random","sendPrompt","then","data","errors","message","slice","_data$response","_data$response$output","reply","response","output","invalidateQueries","prev","catch","err","_err$response","_err$response$data","_err$response2","_err$response2$data","finally","concat","handleStop","stopPrompt","req","_err$response3","_err$response3$data","status","handleClearChatHistory","clearChatHistory","success","SectionLoading","center","_Fragment","ref","onSubmit","value","onChange","target","placeholder","OverlayTrigger","placement","delay","show","hide","overlay","props","Tooltip","id","SuperButton","disabled","IconPlayerStopFilled","IconSend","onUpload","files","setProgress","setIsSuccessUpload","resetDropzone","name","createChatRoom","setProcessing","subscription","pdfs","uploadFile","onUploadProgress","perc","loaded","total","res","_res$data","_res$data2","chat_room","setTimeout","onError","rejectedFiles","PlaygroundPage","DEMO_SUBSCRIPTION","isExtendedLicense","isEL","useLCInfo","toggled","setToggled","collapsed","setCollapsed","windowInnerWidth","setWindowInnerWidth","useEventListener","window","innerWidth","user","useUser","isSubscriptionLoading","useCurrentSubscription","navigate","useNavigate","useParams","currentChatRoomUUID","setCurrentChatRoomUUID","userChatRoomList","useUserChatRoomList","isProcessing","handleChatLabelClick","handleChatRoomDeletion","callback","nextUUID","chatroom","deleteChatRoom","_userChatRoomList$","_userChatRoomList$2","undefined","Object","keys","length","Date","getTime","created_at","DEMO_SUBSCRIPTION_EXPIRE","FullscreenLoading","Sidebar","width","breakPoint","onBackdropClick","backgroundColor","Dropzone","extraOnUploadProps","dropzoneOptions","accept","getAvailableDocumentTypes","maxSize","faPlus","getAvailableDocumentTypesString","Link","to","IconBolt","pdf_size","AvatarPalceholder","username","email","faChevronRight","faBarsStaggered","IconCloudUpload"],"sourceRoot":""}